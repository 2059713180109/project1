/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analyzer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,22],$V2=[1,31],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,34],$V7=[1,24],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,29],$Vd=[1,30],$Ve=[1,32],$Vf=[1,33],$Vg=[5,29,125,126],$Vh=[5,24,25,29,35,38,42,117,121,122,123,125,126,127,136,137,138,140,142],$Vi=[2,78],$Vj=[1,48],$Vk=[1,46],$Vl=[1,47],$Vm=[1,49],$Vn=[1,50],$Vo=[1,54],$Vp=[2,127],$Vq=[1,59],$Vr=[1,61],$Vs=[1,63],$Vt=[1,87],$Vu=[1,78],$Vv=[1,76],$Vw=[1,77],$Vx=[1,79],$Vy=[1,80],$Vz=[1,81],$VA=[1,82],$VB=[1,86],$VC=[8,26,29,32,33,45,52,55,56,61,62,65,66,67,70,80,81,84,93,101,102,108,109,110,111,112,113],$VD=[2,99],$VE=[1,91],$VF=[1,92],$VG=[8,29,32,33,45,52,55,56,61,62,65,66,67,70,84,108,109,110,111,112,113],$VH=[25,27,43,62,72,73,74,75,76,82],$VI=[2,27],$VJ=[1,99],$VK=[8,32],$VL=[8,29,32,33,45,84],$VM=[8,29,32,33,45,56,84],$VN=[8,29,32,33,45,52,56,84],$VO=[8,29,32,33,45,52,55,56,84],$VP=[8,29,32,33,45,52,55,56,84,108,109,110,111,112,113],$VQ=[2,54],$VR=[1,131],$VS=[1,132],$VT=[8,29,32,33,45,52,55,56,61,62,84,108,109,110,111,112,113],$VU=[2,59],$VV=[1,134],$VW=[1,135],$VX=[1,136],$VY=[8,29,32,33,45,52,55,56,61,62,65,66,67,84,108,109,110,111,112,113],$VZ=[2,62],$V_=[1,138],$V$=[1,147],$V01=[8,26,29,32,33,45,52,55,56,61,62,65,66,67,70,80,81,84,101,102,108,109,110,111,112,113],$V11=[2,93],$V21=[1,149],$V31=[1,163],$V41=[1,160],$V51=[1,161],$V61=[1,162],$V71=[1,164],$V81=[1,167],$V91=[2,135],$Va1=[1,174],$Vb1=[1,175],$Vc1=[1,195],$Vd1=[2,83],$Ve1=[2,87],$Vf1=[1,198],$Vg1=[1,207],$Vh1=[2,104],$Vi1=[5,24,25,29,35,38,42,117,119,121,122,123,125,126,127,136,137,138,140,142],$Vj1=[8,26,27,29,32,45],$Vk1=[2,115],$Vl1=[1,214],$Vm1=[1,220],$Vn1=[2,38],$Vo1=[1,224],$Vp1=[2,22],$Vq1=[1,253],$Vr1=[29,32];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"DEC_DECLAVAR":7,"punto_coma":8,"DEC_FUN":9,"DEC_TYPE":10,"ASIGNACION":11,"IF":12,"WHILE":13,"DO_WHILE":14,"SWITCH":15,"FOR":16,"BREAK":17,"CONTINUE":18,"RETURN":19,"OBJETO_FUNCION":20,"UNARIO":21,"CONSOLA":22,"GRAFICAR":23,"type_":24,"id":25,"igual":26,"llave_abre":27,"LIST_ATRIBUTOS":28,"llave_cierra":29,"DEC_ATRIBUTO":30,"LIST_ATRIBUTOS_P":31,"coma_":32,"dos_puntos":33,"TDATO":34,"const_":35,"D_VAR":36,"LIST_VAR":37,"let_":38,"D_VAR_P1":39,"CONDICION_TER":40,"D_VAR_P2":41,"function_":42,"par_abre":43,"LIST_PAR":44,"par_cierra":45,"PARAM":46,"LIST_PAR_P":47,"CONDICION_OR":48,"TERNARIO":49,"CONDICION_AND":50,"CONDICION_OR_P":51,"or_":52,"CONDICION":53,"CONDICION_AND_P":54,"and_":55,"interrogacion_":56,"E":57,"SIG_REL":58,"F":59,"E_P":60,"mas":61,"menos":62,"R":63,"F_P":64,"por":65,"div":66,"mod":67,"T":68,"R_P":69,"pot":70,"T_P":71,"not_":72,"num":73,"bool":74,"str":75,"null_":76,"ARREGLO":77,"OBJETO_TYPE":78,"NEGATIVO":79,"incremento_":80,"decremento_":81,"cor_abre":82,"ELEMENTOS":83,"cor_cierra":84,"ELEMENTOS_P":85,"ATRIBUTOS":86,"ATRIBUTO":87,"ATRIBUTOS_P":88,"OBJ_FUN_CUERPO":89,"PARAMETROS_FUNCION":90,"SUB_OBJETO":91,"DIMENSION":92,"punto_":93,"OB_ATRIBUTO":94,"push_":95,"pop_":96,"length_":97,"ARGUMENTOS":98,"ARGUMENTOS_P":99,"OPERADOR_ASIGNACION":100,"menos_igual":101,"mas_igual":102,"number_":103,"TDIMENSION":104,"string_":105,"boolean_":106,"void_":107,"menor":108,"mayor":109,"menor_igual":110,"mayor_igual":111,"igual_igual":112,"diferente":113,"IF_SENTENCE":114,"IF_CONDICION":115,"IF_STATEMENT":116,"if_":117,"ELSE_IF":118,"else_":119,"ELSE_IF_P":120,"while_":121,"do_":122,"switch_":123,"CASOS":124,"case_":125,"default_":126,"for_":127,"FOR_P":128,"FOR_LET":129,"FOR_CONST":130,"FOR_TRADICIONAL":131,"FOR_OF":132,"FOR_TRADICIONAL_INC":133,"of_":134,"in_":135,"break_":136,"continue_":137,"return_":138,"RETURN_P":139,"console_":140,"log_":141,"graficar_ts":142,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"punto_coma",24:"type_",25:"id",26:"igual",27:"llave_abre",29:"llave_cierra",32:"coma_",33:"dos_puntos",35:"const_",38:"let_",42:"function_",43:"par_abre",45:"par_cierra",52:"or_",55:"and_",56:"interrogacion_",61:"mas",62:"menos",65:"por",66:"div",67:"mod",70:"pot",72:"not_",73:"num",74:"bool",75:"str",76:"null_",80:"incremento_",81:"decremento_",82:"cor_abre",84:"cor_cierra",93:"punto_",95:"push_",96:"pop_",97:"length_",101:"menos_igual",102:"mas_igual",103:"number_",105:"string_",106:"boolean_",107:"void_",108:"menor",109:"mayor",110:"menor_igual",111:"mayor_igual",112:"igual_igual",113:"diferente",117:"if_",119:"else_",121:"while_",122:"do_",123:"switch_",125:"case_",126:"default_",127:"for_",134:"of_",135:"in_",136:"break_",137:"continue_",138:"return_",140:"console_",141:"log_",142:"graficar_ts"},
productions_: [0,[3,2],[4,2],[4,0],[6,2],[6,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,3],[6,2],[6,2],[10,6],[28,2],[31,3],[31,0],[30,3],[7,3],[7,3],[37,3],[37,0],[36,2],[39,2],[39,3],[39,0],[41,2],[41,0],[9,10],[44,2],[44,0],[47,3],[47,0],[46,3],[40,2],[48,2],[51,2],[51,0],[50,2],[54,2],[54,0],[49,4],[49,0],[53,3],[53,1],[57,2],[60,3],[60,3],[60,0],[59,2],[64,3],[64,3],[64,3],[64,0],[63,2],[69,3],[69,0],[68,1],[68,2],[68,2],[71,3],[71,1],[71,1],[71,1],[71,1],[71,1],[71,2],[71,1],[79,1],[79,0],[21,1],[21,1],[21,0],[77,3],[83,2],[83,0],[85,3],[85,0],[78,3],[86,2],[88,3],[88,0],[87,3],[20,2],[89,2],[89,2],[91,2],[91,0],[94,3],[94,3],[94,2],[94,1],[92,4],[92,0],[90,3],[98,2],[98,0],[99,3],[99,0],[11,3],[100,1],[100,1],[100,1],[34,2],[34,2],[34,2],[34,2],[34,1],[104,3],[104,0],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[114,3],[115,3],[116,3],[12,2],[118,2],[118,0],[120,2],[120,1],[13,3],[14,4],[15,5],[124,5],[124,3],[124,0],[16,3],[128,2],[128,2],[129,1],[129,1],[131,9],[133,1],[133,1],[132,5],[130,5],[17,1],[18,1],[19,2],[139,1],[139,0],[22,4],[23,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
   
break;
case 109: case 110: case 111: case 112:
this.$=$$[$0-1];
break;
case 113:
this.$=$$[$0];
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,22:17,23:18,24:$V1,25:$V2,35:$V3,38:$V4,42:$V5,116:23,117:$V6,121:$V7,122:$V8,123:$V9,127:$Va,136:$Vb,137:$Vc,138:$Vd,140:$Ve,142:$Vf},{1:[3]},{5:[1,35]},o($Vg,$V0,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,22:17,23:18,116:23,4:36,24:$V1,25:$V2,35:$V3,38:$V4,42:$V5,117:$V6,121:$V7,122:$V8,123:$V9,127:$Va,136:$Vb,137:$Vc,138:$Vd,140:$Ve,142:$Vf}),{8:[1,37]},o($Vh,[2,5]),{8:[1,38]},{8:[1,39]},o($Vh,[2,8]),o($Vh,[2,9]),{8:[1,40]},o($Vh,[2,11]),o($Vh,[2,12]),{8:[1,41]},{8:[1,42]},{8:[1,43]},{8:$Vi,21:44,26:$Vj,80:$Vk,81:$Vl,100:45,101:$Vm,102:$Vn},{8:[1,51]},{8:[1,52]},{25:$Vo,36:53},{25:$Vo,36:55},{25:[1,56]},{25:[1,57]},o($Vh,$Vp,{118:58,119:$Vq}),{43:$Vr,115:60},{27:$Vs,114:62},{43:$Vr,115:64},{43:[1,65]},{8:[2,146]},{8:[2,147]},{8:[2,150],20:84,25:$V2,27:$Vt,40:67,43:$Vu,48:68,50:69,53:70,57:71,59:72,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB,139:66},o($VC,$VD,{89:88,90:89,92:90,43:$VE,82:$VF}),{93:[1,93]},{43:[1,94]},{43:$Vr,115:95},{1:[2,1]},o($Vg,[2,2]),o($Vh,[2,4]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,10]),o($Vh,[2,13]),o($Vh,[2,14]),o($Vh,[2,15]),{8:[1,96]},{20:84,25:$V2,27:$Vt,40:97,43:$Vu,48:68,50:69,53:70,57:71,59:72,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},o($VG,[2,76]),o($VG,[2,77]),o($VH,[2,106]),o($VH,[2,107]),o($VH,[2,108]),o($Vh,[2,17]),o($Vh,[2,18]),{8:$VI,32:$VJ,37:98},o($VK,[2,31],{39:100,26:[1,101],33:[1,102]}),{8:$VI,32:$VJ,37:103},{43:[1,104]},{26:[1,105]},o($Vh,[2,125]),{27:$Vs,114:108,116:107,117:$V6,120:106},{27:$Vs,114:109},{20:84,25:$V2,27:$Vt,40:110,43:$Vu,48:68,50:69,53:70,57:71,59:72,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},{121:[1,111]},{4:112,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,22:17,23:18,24:$V1,25:$V2,29:$V0,35:$V3,38:$V4,42:$V5,116:23,117:$V6,121:$V7,122:$V8,123:$V9,127:$Va,136:$Vb,137:$Vc,138:$Vd,140:$Ve,142:$Vf},{27:[1,113]},{35:[1,116],38:[1,115],128:114},{8:[2,148]},{8:[2,149]},o($VL,[2,48],{49:117,56:[1,118]}),o($VM,[2,43],{51:119,52:[1,120]}),o($VN,[2,46],{54:121,55:[1,122]}),o($VO,[2,50],{58:123,108:[1,124],109:[1,125],110:[1,126],111:[1,127],112:[1,128],113:[1,129]}),o($VP,$VQ,{60:130,61:$VR,62:$VS}),o($VT,$VU,{64:133,65:$VV,66:$VW,67:$VX}),o($VY,$VZ,{69:137,70:$V_}),o($VG,[2,63]),{20:84,25:$V2,27:$Vt,43:$Vu,71:139,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},{20:84,25:$V2,27:$Vt,43:$Vu,71:140,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},{20:84,25:$V2,27:$Vt,40:141,43:$Vu,48:68,50:69,53:70,57:71,59:72,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},o($VG,[2,67]),o($VG,[2,68]),o($VG,[2,69]),o($VG,[2,70]),o($VG,[2,71]),o($VG,$Vi,{21:142,80:$Vk,81:$Vl}),o($VG,[2,73]),{20:84,25:$V2,27:$Vt,40:144,43:$Vu,48:68,50:69,53:70,57:71,59:72,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB,83:143,84:[2,81]},{25:$V$,86:145,87:146},o($V01,[2,89]),o($V01,$V11,{91:148,93:$V21}),o($V01,$V11,{91:150,93:$V21}),{20:84,25:$V2,27:$Vt,40:152,43:$Vu,45:[2,102],48:68,50:69,53:70,57:71,59:72,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB,98:151},{20:84,25:$V2,27:$Vt,40:153,43:$Vu,48:68,50:69,53:70,57:71,59:72,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},{141:[1,154]},{45:[1,155]},{27:$Vs,114:156},o($Vh,[2,16]),o([8,45],[2,105]),{8:[2,24]},{25:$Vo,36:157},o($VK,[2,28]),{20:84,25:$V2,27:$Vt,40:158,43:$Vu,48:68,50:69,53:70,57:71,59:72,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},{25:$V31,34:159,103:$V41,105:$V51,106:$V61,107:$V71},{8:[2,25]},{25:$V81,44:165,45:[2,36],46:166},{27:[1,168]},o($Vh,[2,126]),o($Vh,$Vp,{118:169,119:$Vq}),o($Vh,[2,129]),o($Vh,[2,130]),{45:[1,170]},{43:$Vr,115:171},{29:[1,172]},{29:$V91,124:173,125:$Va1,126:$Vb1},o($Vh,[2,136]),{25:[1,179],129:176,131:177,132:178},{25:[1,181],130:180},o($VL,[2,40]),{20:84,25:$V2,27:$Vt,40:182,43:$Vu,48:68,50:69,53:70,57:71,59:72,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},o($VM,[2,41]),{20:84,25:$V2,27:$Vt,43:$Vu,48:183,50:69,53:70,57:71,59:72,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},o($VN,[2,44]),{20:84,25:$V2,27:$Vt,43:$Vu,50:184,53:70,57:71,59:72,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},{20:84,25:$V2,27:$Vt,43:$Vu,57:185,59:72,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},o($VH,[2,116]),o($VH,[2,117]),o($VH,[2,118]),o($VH,[2,119]),o($VH,[2,120]),o($VH,[2,121]),o($VP,[2,51]),{20:84,25:$V2,27:$Vt,43:$Vu,59:186,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},{20:84,25:$V2,27:$Vt,43:$Vu,59:187,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},o($VT,[2,55]),{20:84,25:$V2,27:$Vt,43:$Vu,62:$Vv,63:188,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},{20:84,25:$V2,27:$Vt,43:$Vu,62:$Vv,63:189,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},{20:84,25:$V2,27:$Vt,43:$Vu,62:$Vv,63:190,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},o($VY,[2,60]),{20:84,25:$V2,27:$Vt,43:$Vu,62:$Vv,68:191,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},o($VG,[2,64]),o($VG,[2,65]),{45:[1,192]},o($VG,[2,72]),{84:[1,193]},{32:$Vc1,84:$Vd1,85:194},{29:[1,196]},{29:$Ve1,32:$Vf1,88:197},{33:[1,199]},o($V01,[2,90]),{25:[1,201],94:200,95:[1,202],96:[1,203],97:[1,204]},o($V01,[2,91]),{45:[1,205]},{32:$Vg1,45:$Vh1,99:206},{84:[1,208]},{43:$VE,90:209},{8:[2,152]},o($Vi1,[2,124]),{8:$VI,32:$VJ,37:210},o($VK,[2,29]),o($VK,[2,33],{41:211,26:[1,212]}),o($Vj1,$Vk1,{104:213,82:$Vl1}),o($Vj1,$Vk1,{104:215,82:$Vl1}),o($Vj1,$Vk1,{104:216,82:$Vl1}),o($Vj1,$Vk1,{104:217,82:$Vl1}),o($Vj1,[2,113]),{45:[1,218]},{32:$Vm1,45:$Vn1,47:219},{33:[1,221]},{25:$Vo1,28:222,30:223},o($Vh,[2,128]),o([8,27],[2,123]),{8:[2,131]},o($Vi1,[2,122]),{29:[1,225]},{20:84,25:$V2,27:$Vt,40:226,43:$Vu,48:68,50:69,53:70,57:71,59:72,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},{33:[1,227]},o($Vh,[2,137]),o($Vh,[2,139]),o($Vh,[2,140]),{26:[1,228],134:[1,229]},o($Vh,[2,138]),{135:[1,230]},{33:[1,231]},o($VM,[2,42]),o($VN,[2,45]),o($VO,[2,49]),o($VP,$VQ,{60:232,61:$VR,62:$VS}),o($VP,$VQ,{60:233,61:$VR,62:$VS}),o($VT,$VU,{64:234,65:$VV,66:$VW,67:$VX}),o($VT,$VU,{64:235,65:$VV,66:$VW,67:$VX}),o($VT,$VU,{64:236,65:$VV,66:$VW,67:$VX}),o($VY,$VZ,{69:237,70:$V_}),o($VG,[2,66]),o($VG,[2,79]),{84:[2,80]},{20:84,25:$V2,27:$Vt,40:238,43:$Vu,48:68,50:69,53:70,57:71,59:72,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},o($VG,[2,84]),{29:[2,85]},{25:$V$,87:239},{20:84,25:$V2,27:$Vt,40:240,43:$Vu,48:68,50:69,53:70,57:71,59:72,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},o($V01,[2,92]),o($VC,$VD,{92:241,82:$VF}),{43:$VE,90:242},o($V01,$V11,{91:243,93:$V21}),o($V01,[2,97]),o($VC,[2,100]),{45:[2,101]},{20:84,25:$V2,27:$Vt,40:244,43:$Vu,48:68,50:69,53:70,57:71,59:72,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},o($VC,$VD,{92:245,82:$VF}),{8:[2,151]},{8:[2,26]},o($VK,[2,30]),{20:84,25:$V2,27:$Vt,40:246,43:$Vu,48:68,50:69,53:70,57:71,59:72,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},o($Vj1,[2,109]),{84:[1,247]},o($Vj1,[2,110]),o($Vj1,[2,111]),o($Vj1,[2,112]),{33:[1,248]},{45:[2,35]},{25:$V81,46:249},{25:$V31,34:250,103:$V41,105:$V51,106:$V61,107:$V71},{29:[1,251]},{29:$Vp1,31:252,32:$Vq1},{33:[1,254]},o($Vh,[2,132]),{33:[1,255]},{4:256,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,22:17,23:18,24:$V1,25:$V2,29:$V0,35:$V3,38:$V4,42:$V5,116:23,117:$V6,121:$V7,122:$V8,123:$V9,127:$Va,136:$Vb,137:$Vc,138:$Vd,140:$Ve,142:$Vf},{20:84,25:$V2,27:$Vt,40:257,43:$Vu,48:68,50:69,53:70,57:71,59:72,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},{25:[1,258]},{25:[1,259]},{20:84,25:$V2,27:$Vt,40:260,43:$Vu,48:68,50:69,53:70,57:71,59:72,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},o($VP,[2,52]),o($VP,[2,53]),o($VT,[2,56]),o($VT,[2,57]),o($VT,[2,58]),o($VY,[2,61]),{32:$Vc1,84:$Vd1,85:261},{29:$Ve1,32:$Vf1,88:262},o($Vr1,[2,88]),o($V01,$V11,{91:263,93:$V21}),o($V01,$V11,{91:264,93:$V21}),o($V01,[2,96]),{32:$Vg1,45:$Vh1,99:265},o($VC,[2,98]),o($VK,[2,32]),o($Vj1,$Vk1,{104:266,82:$Vl1}),{25:$V31,34:267,103:$V41,105:$V51,106:$V61,107:$V71},{32:$Vm1,45:$Vn1,47:268},o([32,45],[2,39]),{8:[2,19]},{29:[2,20]},{25:$Vo1,30:269},{25:$V31,34:270,103:$V41,105:$V51,106:$V61,107:$V71},o([29,125,126],$V0,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,22:17,23:18,116:23,4:271,24:$V1,25:$V2,35:$V3,38:$V4,42:$V5,117:$V6,121:$V7,122:$V8,123:$V9,127:$Va,136:$Vb,137:$Vc,138:$Vd,140:$Ve,142:$Vf}),{29:[2,134]},{8:[1,272]},{45:[1,273]},{45:[1,274]},o($VL,[2,47]),{84:[2,82]},{29:[2,86]},o($V01,[2,94]),o($V01,[2,95]),{45:[2,103]},o($Vj1,[2,114]),{27:[1,275]},{45:[2,37]},{29:$Vp1,31:276,32:$Vq1},o($Vr1,[2,23]),{29:$V91,124:277,125:$Va1,126:$Vb1},{20:84,25:$V2,27:$Vt,40:278,43:$Vu,48:68,50:69,53:70,57:71,59:72,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB},{27:$Vs,114:279},{27:$Vs,114:280},{4:281,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,22:17,23:18,24:$V1,25:$V2,29:$V0,35:$V3,38:$V4,42:$V5,116:23,117:$V6,121:$V7,122:$V8,123:$V9,127:$Va,136:$Vb,137:$Vc,138:$Vd,140:$Ve,142:$Vf},{29:[2,21]},{29:[2,133]},{8:[1,282]},o($Vh,[2,144]),o($Vh,[2,145]),{29:[1,283]},{11:285,20:287,25:$V2,27:$Vt,40:286,43:$Vu,48:68,50:69,53:70,57:71,59:72,62:$Vv,63:73,68:74,71:75,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:83,78:85,82:$VB,133:284},o($Vh,[2,34]),{45:[1,288]},{45:[2,142]},{45:[2,143]},o([45,52,55,56,61,62,65,66,67,70,108,109,110,111,112,113],$Vi,{100:45,21:142,26:$Vj,80:$Vk,81:$Vl,101:$Vm,102:$Vn}),{27:$Vs,114:289},o($Vh,[2,141])],
defaultActions: {28:[2,146],29:[2,147],35:[2,1],66:[2,148],67:[2,149],98:[2,24],103:[2,25],155:[2,152],171:[2,131],194:[2,80],197:[2,85],206:[2,101],209:[2,151],210:[2,26],219:[2,35],251:[2,19],252:[2,20],256:[2,134],261:[2,82],262:[2,86],265:[2,103],268:[2,37],276:[2,21],277:[2,133],285:[2,142],286:[2,143]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip linecoment */
break;
case 2:/*skip multi line coment*/
break;
case 3:return	'let_'
break;
case 4:return	'const_'
break;
case 5:return	'number_'
break;
case 6:return	'string_'
break;
case 7:return	'boolean_'
break;
case 8:return  'void_'
break;
case 9:return 76
break;
case 10:return 24
break;
case 11:return 95
break;
case 12:return 96
break;
case 13:return 97
break;
case 14:return 32
break;
case 15:return 93
break;
case 16:return 42
break;
case 17:return	'if_'
break;
case 18:return	'else_'
break;
case 19:return	'switch_'
break;
case 20:return	'case_'
break;
case 21:return	'default_'
break;
case 22:return	'while_'
break;
case 23:return	'do_'
break;
case 24:return	'for_'
break;
case 25:return	'in_'
break;
case 26:return	'of_'
break;
case 27:return	'return_'
break;
case 28:return	'break_'
break;
case 29:return	'continue_'
break;
case 30:return  'console_'
break;
case 31:return  'log_'
break;
case 32:return  'graficar_ts'
break;
case 33:return	'menor_igual'
break;
case 34:return	'menor'
break;
case 35:return	'mayor_igual'
break;
case 36:return	'mayor'
break;
case 37:return	'igual_igual'
break;
case 38:return	'diferente'
break;
case 39:return 	'incremento_'
break;
case 40:return 	'decremento_'
break;
case 41:return	'cor_abre'
break;
case 42:return	'cor_cierra'
break;
case 43:return	'llave_abre'
break;
case 44:return	'llave_cierra'
break;
case 45:return	'par_abre'
break;
case 46:return	'par_cierra'
break;
case 47:return	'and_'
break;
case 48:return	'or_'
break;
case 49:return	'not_'
break;
case 50:return	'interrogacion_'
break;
case 51:return 102
break;
case 52:return 101
break;
case 53:return 26
break;
case 54:return 33
break;
case 55:return 8
break;
case 56:return 70
break;
case 57:return 65
break;
case 58:return 66
break;
case 59:return 62
break;
case 60:return 61
break;
case 61:return 67
break;
case 62:return 74
break;
case 63:return 73
break;
case 64:return 75
break;
case 65:return 75
break;
case 66:return 75
break;
case 67:return 75
break;
case 68:return 75
break;
case 69:return 25
break;
case 70:return 5
break;
case 71:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/([^[\n\r])*(\r|\n|\r\n)?)/,/^(?:\/\*[^'?']*\*\/)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:null\b)/,/^(?:type\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:,)/,/^(?:\.)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:\+=)/,/^(?:-=)/,/^(?:=)/,/^(?::)/,/^(?:;)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:true|false\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:“[^\"\n]*”)/,/^(?:"[^\"\n]*")/,/^(?:'[^''\n]*')/,/^(?:‘[^''\n]*’)/,/^(?:`[^''\n]*`)/,/^(?:[a-zA-Z]([a-zA-Z0-9]|_)*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analyzer;
exports.Parser = analyzer.Parser;
exports.parse = function () { return analyzer.parse.apply(analyzer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}