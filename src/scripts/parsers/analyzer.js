/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analyzer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,16],$V2=[1,17],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,23],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[5,21,110,111],$Vc=[5,16,17,21,26,29,34,102,106,107,108,110,111,112],$Vd=[1,27],$Ve=[1,31],$Vf=[2,109],$Vg=[1,33],$Vh=[1,35],$Vi=[1,37],$Vj=[2,20],$Vk=[1,42],$Vl=[5,16,17,21,25,26,29,34,102,106,107,108,110,111,112],$Vm=[1,68],$Vn=[1,60],$Vo=[1,58],$Vp=[1,59],$Vq=[1,61],$Vr=[1,62],$Vs=[1,63],$Vt=[1,64],$Vu=[1,67],$Vv=[1,87],$Vw=[1,84],$Vx=[1,85],$Vy=[1,86],$Vz=[1,88],$VA=[1,91],$VB=[5,16,17,21,22,25,26,29,34,37,76,102,106,107,108,110,111,112,118],$VC=[5,16,17,21,22,25,26,29,34,37,42,76,102,106,107,108,110,111,112,118],$VD=[5,16,17,21,22,25,26,29,34,37,42,45,76,102,106,107,108,110,111,112,118],$VE=[5,16,17,21,22,25,26,29,34,37,42,45,48,76,102,106,107,108,110,111,112,118],$VF=[5,16,17,21,22,25,26,29,34,37,42,45,48,76,93,94,95,96,97,98,102,106,107,108,110,111,112,118],$VG=[2,47],$VH=[1,107],$VI=[1,108],$VJ=[5,16,17,21,22,25,26,29,34,37,42,45,48,53,54,76,93,94,95,96,97,98,102,106,107,108,110,111,112,118],$VK=[2,52],$VL=[1,110],$VM=[1,111],$VN=[1,112],$VO=[5,16,17,21,22,25,26,29,34,37,42,45,48,53,54,57,58,59,76,93,94,95,96,97,98,102,106,107,108,110,111,112,118],$VP=[2,55],$VQ=[1,114],$VR=[5,16,17,21,22,25,26,29,34,37,42,45,48,53,54,57,58,59,61,76,93,94,95,96,97,98,102,106,107,108,110,111,112,118],$VS=[5,16,17,21,22,25,26,29,34,37,42,45,48,53,54,57,58,59,61,72,73,76,82,93,94,95,96,97,98,102,106,107,108,110,111,112,118],$VT=[2,86],$VU=[1,126],$VV=[1,127],$VW=[2,117],$VX=[1,133],$VY=[1,134],$VZ=[5,16,17,21,26,29,34,102,104,106,107,108,110,111,112],$V_=[5,16,17,18,19,21,25,26,29,34,37,102,106,107,108,110,111,112],$V$=[1,146],$V01=[2,31],$V11=[17,35,54,63,64,65,66,67,74],$V21=[1,163],$V31=[2,75],$V41=[5,16,17,21,22,25,26,29,34,37,42,45,48,53,54,57,58,59,61,72,73,76,93,94,95,96,97,98,102,106,107,108,110,111,112,118],$V51=[2,80],$V61=[1,165],$V71=[1,197],$V81=[2,91],$V91=[2,16],$Va1=[1,221];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"DEC_DECLAVAR":7,"DEC_FUN":8,"DEC_TYPE":9,"ASIGNACION":10,"IF":11,"WHILE":12,"DO_WHILE":13,"SWITCH":14,"FOR":15,"type_":16,"id":17,"igual":18,"llave_abre":19,"LIST_ATRIBUTOS":20,"llave_cierra":21,"dos_puntos":22,"TDATO":23,"LIST_ATRIBUTOS_P":24,"coma_":25,"const_":26,"D_VAR":27,"LIST_VAR":28,"let_":29,"D_VAR_P1":30,"T":31,"D_VAR_P2":32,"CONDICION_OR":33,"function_":34,"par_abre":35,"LIST_PAR":36,"par_cierra":37,"PARAM":38,"LIST_PAR_P":39,"CONDICION_AND":40,"CONDICION_OR_P":41,"or_":42,"CONDICION":43,"CONDICION_AND_P":44,"and_":45,"COND":46,"TERNARIO":47,"interrogacion_":48,"E":49,"SIG_REL":50,"F":51,"E_P":52,"mas":53,"menos":54,"R":55,"F_P":56,"por":57,"div":58,"mod":59,"R_P":60,"pot":61,"T_P":62,"not_":63,"num":64,"bool":65,"str":66,"null_":67,"ARREGLO":68,"OBJETO_FUNCION":69,"UNARIO":70,"NEGATIVO":71,"incremento_":72,"decremento_":73,"cor_abre":74,"ELEMENTOS":75,"cor_cierra":76,"ELEMENTOS_P":77,"OBJ_FUN_CUERPO":78,"PARAMETROS_FUNCION":79,"SUB_OBJETO":80,"DIMENSION":81,"punto_":82,"OB_ATRIBUTO":83,"push_":84,"pop_":85,"length_":86,"ARGUMENTOS":87,"ARGUMENTOS_P":88,"number_":89,"string_":90,"boolean_":91,"void_":92,"menor":93,"mayor":94,"menor_igual":95,"mayor_igual":96,"igual_igual":97,"diferente":98,"IF_SENTENCE":99,"IF_CONDICION":100,"IF_STATEMENT":101,"if_":102,"ELSE_IF":103,"else_":104,"ELSE_IF_P":105,"while_":106,"do_":107,"switch_":108,"CASOS":109,"case_":110,"default_":111,"for_":112,"FOR_P":113,"FOR_LET":114,"FOR_CONST":115,"FOR_TRADICIONAL":116,"FOR_OF":117,"punto_coma":118,"FOR_TRADICIONAL_INC":119,"of_":120,"in_":121,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"type_",17:"id",18:"igual",19:"llave_abre",21:"llave_cierra",22:"dos_puntos",25:"coma_",26:"const_",29:"let_",34:"function_",35:"par_abre",37:"par_cierra",42:"or_",45:"and_",48:"interrogacion_",53:"mas",54:"menos",57:"por",58:"div",59:"mod",61:"pot",63:"not_",64:"num",65:"bool",66:"str",67:"null_",72:"incremento_",73:"decremento_",74:"cor_abre",76:"cor_cierra",82:"punto_",84:"push_",85:"pop_",86:"length_",89:"number_",90:"string_",91:"boolean_",92:"void_",93:"menor",94:"mayor",95:"menor_igual",96:"mayor_igual",97:"igual_igual",98:"diferente",102:"if_",104:"else_",106:"while_",107:"do_",108:"switch_",110:"case_",111:"default_",112:"for_",118:"punto_coma",120:"of_",121:"in_"},
productions_: [0,[3,2],[4,2],[4,0],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[9,6],[20,4],[24,5],[24,0],[7,3],[7,3],[28,3],[28,0],[27,2],[30,2],[30,3],[30,0],[32,2],[32,0],[8,9],[36,2],[36,0],[39,3],[39,0],[38,3],[33,2],[41,2],[41,0],[40,2],[44,2],[44,0],[43,2],[47,4],[47,0],[46,3],[46,1],[49,2],[52,3],[52,3],[52,0],[51,2],[56,3],[56,3],[56,3],[56,0],[55,2],[60,3],[60,0],[31,1],[31,2],[31,2],[62,3],[62,1],[62,1],[62,1],[62,1],[62,1],[62,2],[71,1],[71,0],[70,1],[70,1],[70,0],[68,3],[75,2],[75,0],[77,3],[77,0],[69,2],[78,2],[78,2],[80,2],[80,0],[83,3],[83,3],[83,3],[83,3],[81,4],[81,0],[79,3],[87,2],[87,0],[88,3],[88,0],[10,3],[23,1],[23,1],[23,1],[23,1],[23,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[99,3],[100,3],[101,3],[11,2],[103,2],[103,0],[105,2],[105,1],[12,3],[13,4],[14,5],[109,5],[109,3],[109,0],[15,3],[113,2],[113,2],[114,1],[114,1],[116,9],[119,1],[119,1],[117,5],[115,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
   
break;
case 93: case 94: case 95: case 96: case 97:
this.$=$$[$0];
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,26:$V3,29:$V4,34:$V5,101:18,102:$V6,106:$V7,107:$V8,108:$V9,112:$Va},{1:[3]},{5:[1,24]},o($Vb,$V0,{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,101:18,4:25,16:$V1,17:$V2,26:$V3,29:$V4,34:$V5,102:$V6,106:$V7,107:$V8,108:$V9,112:$Va}),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,12]),{17:$Vd,27:26},{17:$Vd,27:28},{17:[1,29]},{17:[1,30]},{18:$Ve},o($Vc,$Vf,{103:32,104:$Vg}),{35:$Vh,100:34},{19:$Vi,99:36},{35:$Vh,100:38},{35:[1,39]},{35:$Vh,100:40},{1:[2,1]},o($Vb,[2,2]),o($Vc,$Vj,{28:41,25:$Vk}),o($Vl,[2,24],{30:43,18:[1,44],22:[1,45]}),o($Vc,$Vj,{28:46,25:$Vk}),{35:[1,47]},{18:[1,48]},{17:$Vm,31:56,33:49,35:$Vn,40:50,43:51,46:52,49:53,51:54,54:$Vo,55:55,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},o($Vc,[2,107]),{19:$Vi,99:71,101:70,102:$V6,105:69},{19:$Vi,99:72},{17:$Vm,31:56,33:73,35:$Vn,40:50,43:51,46:52,49:53,51:54,54:$Vo,55:55,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},{106:[1,74]},{4:75,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,21:$V0,26:$V3,29:$V4,34:$V5,101:18,102:$V6,106:$V7,107:$V8,108:$V9,112:$Va},{19:[1,76]},{26:[1,79],29:[1,78],113:77},{19:$Vi,99:80},o($Vc,[2,17]),{17:$Vd,27:81},o($Vl,[2,21]),{17:$Vm,31:82,35:$Vn,54:$Vo,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},{17:$Vv,23:83,89:$Vw,90:$Vx,91:$Vy,92:$Vz},o($Vc,[2,18]),{17:$VA,36:89,37:[2,29],38:90},{19:[1,92]},o([5,16,17,21,26,29,34,37,102,106,107,108,110,111,112],[2,92]),o($VB,[2,35],{41:93,42:[1,94]}),o($VC,[2,38],{44:95,45:[1,96]}),o($VD,[2,41],{47:97,48:[1,98]}),o($VE,[2,43],{50:99,93:[1,100],94:[1,101],95:[1,102],96:[1,103],97:[1,104],98:[1,105]}),o($VF,$VG,{52:106,53:$VH,54:$VI}),o($VJ,$VK,{56:109,57:$VL,58:$VM,59:$VN}),o($VO,$VP,{60:113,61:$VQ}),o($VR,[2,56]),{17:$Vm,35:$Vn,62:115,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},{17:$Vm,35:$Vn,62:116,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},{17:$Vm,31:56,33:117,35:$Vn,40:50,43:51,46:52,49:53,51:54,54:$Vo,55:55,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},o($VR,[2,60]),o($VR,[2,61]),o($VR,[2,62]),o($VR,[2,63]),o($VR,[2,64]),o($VR,[2,70],{70:118,72:[1,119],73:[1,120]}),{17:$Vm,31:56,33:122,35:$Vn,40:50,43:51,46:52,49:53,51:54,54:$Vo,55:55,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu,75:121,76:[2,73]},o($VS,$VT,{78:123,79:124,81:125,35:$VU,74:$VV}),o($Vc,[2,108]),o($Vc,$Vf,{103:128,104:$Vg}),o($Vc,[2,111]),o($Vc,[2,112]),{37:[1,129]},{35:$Vh,100:130},{21:[1,131]},{21:$VW,109:132,110:$VX,111:$VY},o($Vc,[2,118]),{17:[1,138],114:135,116:136,117:137},{17:[1,140],115:139},o($VZ,[2,106]),o($Vc,$Vj,{28:141,25:$Vk}),o($Vl,[2,22]),o($Vl,[2,26],{32:142,18:[1,143]}),o($V_,[2,93]),o($V_,[2,94]),o($V_,[2,95]),o($V_,[2,96]),o($V_,[2,97]),{37:[1,144]},{25:$V$,37:$V01,39:145},{22:[1,147]},{17:[1,149],20:148},o($VB,[2,33]),{17:$Vm,31:56,33:150,35:$Vn,40:50,43:51,46:52,49:53,51:54,54:$Vo,55:55,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},o($VC,[2,36]),{17:$Vm,31:56,35:$Vn,40:151,43:51,46:52,49:53,51:54,54:$Vo,55:55,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},o($VD,[2,39]),{17:$Vm,31:56,35:$Vn,46:152,49:53,51:54,54:$Vo,55:55,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},{17:$Vm,31:56,35:$Vn,49:153,51:54,54:$Vo,55:55,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},o($V11,[2,98]),o($V11,[2,99]),o($V11,[2,100]),o($V11,[2,101]),o($V11,[2,102]),o($V11,[2,103]),o($VF,[2,44]),{17:$Vm,31:56,35:$Vn,51:154,54:$Vo,55:55,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},{17:$Vm,31:56,35:$Vn,51:155,54:$Vo,55:55,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},o($VJ,[2,48]),{17:$Vm,31:56,35:$Vn,54:$Vo,55:156,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},{17:$Vm,31:56,35:$Vn,54:$Vo,55:157,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},{17:$Vm,31:56,35:$Vn,54:$Vo,55:158,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},o($VO,[2,53]),{17:$Vm,31:159,35:$Vn,54:$Vo,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},o($VR,[2,57]),o($VR,[2,58]),{37:[1,160]},o($VR,[2,65]),o($VR,[2,68]),o($VR,[2,69]),{76:[1,161]},{25:$V21,76:$V31,77:162},o($V41,[2,76]),o($V41,$V51,{80:164,82:$V61}),o($V41,$V51,{80:166,82:$V61}),{17:$Vm,31:56,33:168,35:$Vn,37:[2,89],40:50,43:51,46:52,49:53,51:54,54:$Vo,55:55,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu,87:167},{17:$Vm,31:56,33:169,35:$Vn,40:50,43:51,46:52,49:53,51:54,54:$Vo,55:55,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},o($Vc,[2,110]),o([5,16,17,19,21,26,29,34,102,106,107,108,110,111,112],[2,105]),o($Vc,[2,113]),o($VZ,[2,104]),{21:[1,170]},{17:$Vm,31:56,33:171,35:$Vn,40:50,43:51,46:52,49:53,51:54,54:$Vo,55:55,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},{22:[1,172]},o($Vc,[2,119]),o($Vc,[2,121]),o($Vc,[2,122]),{18:[1,173],120:[1,174]},o($Vc,[2,120]),{121:[1,175]},o($Vc,[2,19]),o($Vl,[2,23]),{17:$Vm,31:56,33:176,35:$Vn,40:50,43:51,46:52,49:53,51:54,54:$Vo,55:55,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},{22:[1,177]},{37:[2,28]},{17:$VA,38:178},{17:$Vv,23:179,89:$Vw,90:$Vx,91:$Vy,92:$Vz},{21:[1,180]},{22:[1,181]},o($VB,[2,34]),o($VC,[2,37]),{22:[1,182]},o($VE,[2,42]),o($VF,$VG,{52:183,53:$VH,54:$VI}),o($VF,$VG,{52:184,53:$VH,54:$VI}),o($VJ,$VK,{56:185,57:$VL,58:$VM,59:$VN}),o($VJ,$VK,{56:186,57:$VL,58:$VM,59:$VN}),o($VJ,$VK,{56:187,57:$VL,58:$VM,59:$VN}),o($VO,$VP,{60:188,61:$VQ}),o($VR,[2,59]),o($VR,[2,71]),{76:[2,72]},{17:$Vm,31:56,33:189,35:$Vn,40:50,43:51,46:52,49:53,51:54,54:$Vo,55:55,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},o($V41,[2,77]),{17:[1,191],83:190,84:[1,192],85:[1,193],86:[1,194]},o($V41,[2,78]),{37:[1,195]},{25:$V71,37:$V81,88:196},{76:[1,198]},o($Vc,[2,114]),{22:[1,199]},{4:200,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:$V2,21:$V0,26:$V3,29:$V4,34:$V5,101:18,102:$V6,106:$V7,107:$V8,108:$V9,112:$Va},{17:$Vm,31:56,33:201,35:$Vn,40:50,43:51,46:52,49:53,51:54,54:$Vo,55:55,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},{17:[1,202]},{17:[1,203]},o($Vl,[2,25]),{17:$Vv,23:204,89:$Vw,90:$Vx,91:$Vy,92:$Vz},{25:$V$,37:$V01,39:205},o([25,37],[2,32]),o($Vc,[2,13]),{17:$Vv,23:206,89:$Vw,90:$Vx,91:$Vy,92:$Vz},{17:$Vm,31:56,35:$Vn,46:207,49:53,51:54,54:$Vo,55:55,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},o($VF,[2,45]),o($VF,[2,46]),o($VJ,[2,49]),o($VJ,[2,50]),o($VJ,[2,51]),o($VO,[2,54]),{25:$V21,76:$V31,77:208},o($V41,[2,79]),o($VS,$VT,{81:209,74:$VV}),{35:$VU,79:210},{35:$VU,79:211},{35:$VU,79:212},o($VS,[2,87]),{37:[2,88]},{17:$Vm,31:56,33:213,35:$Vn,40:50,43:51,46:52,49:53,51:54,54:$Vo,55:55,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},o($VS,$VT,{81:214,74:$VV}),o([21,110,111],$V0,{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,101:18,4:215,16:$V1,17:$V2,26:$V3,29:$V4,34:$V5,102:$V6,106:$V7,107:$V8,108:$V9,112:$Va}),{21:[2,116]},{118:[1,216]},{37:[1,217]},{37:[1,218]},{19:[1,219]},{37:[2,30]},{21:$V91,24:220,25:$Va1},o($VD,[2,40]),{76:[2,74]},o($V41,$V51,{80:222,82:$V61}),o($V41,$V51,{80:223,82:$V61}),o($V41,$V51,{80:224,82:$V61}),o($V41,$V51,{80:225,82:$V61}),{25:$V71,37:$V81,88:226},o($VS,[2,85]),{21:$VW,109:227,110:$VX,111:$VY},{17:$Vm,31:56,33:228,35:$Vn,40:50,43:51,46:52,49:53,51:54,54:$Vo,55:55,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu},{19:$Vi,99:229},{19:$Vi,99:230},{21:[1,231]},{21:[2,14]},{17:[1,232]},o($V41,[2,81]),o($V41,[2,82]),o($V41,[2,83]),o($V41,[2,84]),{37:[2,90]},{21:[2,115]},{118:[1,233]},o($Vc,[2,126]),o($Vc,[2,127]),o($Vc,[2,27]),{22:[1,234]},{10:236,17:[1,238],31:56,33:237,35:$Vn,40:50,43:51,46:52,49:53,51:54,54:$Vo,55:55,62:57,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:65,69:66,74:$Vu,119:235},{17:$Vv,23:239,89:$Vw,90:$Vx,91:$Vy,92:$Vz},{37:[1,240]},{37:[2,124]},{37:[2,125]},o([37,42,45,48,53,54,57,58,59,61,72,73,82,93,94,95,96,97,98],$VT,{78:123,79:124,81:125,18:$Ve,35:$VU,74:$VV}),{21:$V91,24:241,25:$Va1},{19:$Vi,99:242},{21:[2,15]},o($Vc,[2,123])],
defaultActions: {24:[2,1],145:[2,28],162:[2,72],196:[2,88],200:[2,116],205:[2,30],208:[2,74],220:[2,14],226:[2,90],227:[2,115],236:[2,124],237:[2,125],241:[2,15]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip linecoment */
break;
case 2:/*skip multi line coment*/
break;
case 3:return	'let_'
break;
case 4:return	'const_'
break;
case 5:return	'number_'
break;
case 6:return	'string_'
break;
case 7:return	'boolean_'
break;
case 8:return  'void_'
break;
case 9:return 67
break;
case 10:return 16
break;
case 11:return 84
break;
case 12:return 85
break;
case 13:return 86
break;
case 14:return 25
break;
case 15:return 82
break;
case 16:return 34
break;
case 17:return	'if_'
break;
case 18:return	'else_'
break;
case 19:return	'switch_'
break;
case 20:return	'case_'
break;
case 21:return	'default_'
break;
case 22:return	'while_'
break;
case 23:return	'do_'
break;
case 24:return	'for_'
break;
case 25:return	'in_'
break;
case 26:return	'of_'
break;
case 27:return	'cor_abre'
break;
case 28:return	'cor_cierra'
break;
case 29:return	'llave_abre'
break;
case 30:return	'llave_cierra'
break;
case 31:return	'par_abre'
break;
case 32:return	'par_cierra'
break;
case 33:return	'and_'
break;
case 34:return	'or_'
break;
case 35:return	'not_'
break;
case 36:return	'interrogacion_'
break;
case 37:return	'menor_igual'
break;
case 38:return	'menor'
break;
case 39:return	'mayor_igual'
break;
case 40:return	'mayor'
break;
case 41:return	'igual_igual'
break;
case 42:return	'diferente'
break;
case 43:return 	'incremento_'
break;
case 44:return 	'decremento_'
break;
case 45:return 18
break;
case 46:return 22
break;
case 47:return 118
break;
case 48:return 61
break;
case 49:return 57
break;
case 50:return 58
break;
case 51:return 54
break;
case 52:return 53
break;
case 53:return 59
break;
case 54:return 65
break;
case 55:return 64
break;
case 56:return 66
break;
case 57:return 66
break;
case 58:return 66
break;
case 59:return 66
break;
case 60:return 17
break;
case 61:return 5
break;
case 62:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/([^[\n\r])*(\r|\n|\r\n)?)/,/^(?:\/\*[^'?']*\*\/)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:null\b)/,/^(?:type\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:,)/,/^(?:\.)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:=)/,/^(?::)/,/^(?:;)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:true|false\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:“[^\"\n]*”)/,/^(?:"[^\"\n]*")/,/^(?:'[^''\n]*')/,/^(?:‘[^''\n]*’)/,/^(?:[a-zA-Z]([a-zA-Z0-9]|_)*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analyzer;
exports.Parser = analyzer.Parser;
exports.parse = function () { return analyzer.parse.apply(analyzer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}