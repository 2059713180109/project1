/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analyzer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,21],$V2=[1,30],$V3=[1,18],$V4=[1,19],$V5=[1,20],$V6=[1,32],$V7=[1,23],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,28],$Vd=[1,29],$Ve=[1,31],$Vf=[5,28,124,125],$Vg=[5,23,24,28,34,37,41,116,120,121,122,124,125,126,135,136,137,139],$Vh=[2,77],$Vi=[1,46],$Vj=[1,44],$Vk=[1,45],$Vl=[1,47],$Vm=[1,48],$Vn=[1,51],$Vo=[2,126],$Vp=[1,56],$Vq=[1,58],$Vr=[1,60],$Vs=[1,84],$Vt=[1,75],$Vu=[1,73],$Vv=[1,74],$Vw=[1,76],$Vx=[1,77],$Vy=[1,78],$Vz=[1,79],$VA=[1,83],$VB=[8,25,28,31,32,44,49,52,55,60,61,64,65,66,69,79,80,83,92,100,101,107,108,109,110,111,112],$VC=[2,98],$VD=[1,88],$VE=[1,89],$VF=[8,28,31,32,44,49,52,55,60,61,64,65,66,69,83,107,108,109,110,111,112],$VG=[24,26,42,61,71,72,73,74,75,81],$VH=[2,26],$VI=[1,95],$VJ=[8,31],$VK=[8,28,31,32,44,83],$VL=[8,28,31,32,44,49,83],$VM=[8,28,31,32,44,49,52,83],$VN=[8,28,31,32,44,49,52,55,83],$VO=[8,28,31,32,44,49,52,55,83,107,108,109,110,111,112],$VP=[2,53],$VQ=[1,127],$VR=[1,128],$VS=[8,28,31,32,44,49,52,55,60,61,83,107,108,109,110,111,112],$VT=[2,58],$VU=[1,130],$VV=[1,131],$VW=[1,132],$VX=[8,28,31,32,44,49,52,55,60,61,64,65,66,83,107,108,109,110,111,112],$VY=[2,61],$VZ=[1,134],$V_=[1,143],$V$=[8,25,28,31,32,44,49,52,55,60,61,64,65,66,69,79,80,83,100,101,107,108,109,110,111,112],$V01=[2,92],$V11=[1,145],$V21=[1,158],$V31=[1,155],$V41=[1,156],$V51=[1,157],$V61=[1,159],$V71=[1,162],$V81=[2,134],$V91=[1,169],$Va1=[1,170],$Vb1=[1,190],$Vc1=[2,82],$Vd1=[2,86],$Ve1=[1,193],$Vf1=[1,202],$Vg1=[2,103],$Vh1=[5,23,24,28,34,37,41,116,118,120,121,122,124,125,126,135,136,137,139],$Vi1=[8,25,26,28,31,44],$Vj1=[2,114],$Vk1=[1,209],$Vl1=[1,215],$Vm1=[2,37],$Vn1=[1,219],$Vo1=[2,21],$Vp1=[1,248],$Vq1=[28,31];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"DEC_DECLAVAR":7,"punto_coma":8,"DEC_FUN":9,"DEC_TYPE":10,"ASIGNACION":11,"IF":12,"WHILE":13,"DO_WHILE":14,"SWITCH":15,"FOR":16,"BREAK":17,"CONTINUE":18,"RETURN":19,"OBJETO_FUNCION":20,"UNARIO":21,"CONSOLA":22,"type_":23,"id":24,"igual":25,"llave_abre":26,"LIST_ATRIBUTOS":27,"llave_cierra":28,"DEC_ATRIBUTO":29,"LIST_ATRIBUTOS_P":30,"coma_":31,"dos_puntos":32,"TDATO":33,"const_":34,"D_VAR":35,"LIST_VAR":36,"let_":37,"D_VAR_P1":38,"CONDICION_OR":39,"D_VAR_P2":40,"function_":41,"par_abre":42,"LIST_PAR":43,"par_cierra":44,"PARAM":45,"LIST_PAR_P":46,"CONDICION_AND":47,"CONDICION_OR_P":48,"or_":49,"CONDICION":50,"CONDICION_AND_P":51,"and_":52,"COND":53,"TERNARIO":54,"interrogacion_":55,"E":56,"SIG_REL":57,"F":58,"E_P":59,"mas":60,"menos":61,"R":62,"F_P":63,"por":64,"div":65,"mod":66,"T":67,"R_P":68,"pot":69,"T_P":70,"not_":71,"num":72,"bool":73,"str":74,"null_":75,"ARREGLO":76,"OBJETO_TYPE":77,"NEGATIVO":78,"incremento_":79,"decremento_":80,"cor_abre":81,"ELEMENTOS":82,"cor_cierra":83,"ELEMENTOS_P":84,"ATRIBUTOS":85,"ATRIBUTO":86,"ATRIBUTOS_P":87,"OBJ_FUN_CUERPO":88,"PARAMETROS_FUNCION":89,"SUB_OBJETO":90,"DIMENSION":91,"punto_":92,"OB_ATRIBUTO":93,"push_":94,"pop_":95,"length_":96,"ARGUMENTOS":97,"ARGUMENTOS_P":98,"OPERADOR_ASIGNACION":99,"menos_igual":100,"mas_igual":101,"number_":102,"TDIMENSION":103,"string_":104,"boolean_":105,"void_":106,"menor":107,"mayor":108,"menor_igual":109,"mayor_igual":110,"igual_igual":111,"diferente":112,"IF_SENTENCE":113,"IF_CONDICION":114,"IF_STATEMENT":115,"if_":116,"ELSE_IF":117,"else_":118,"ELSE_IF_P":119,"while_":120,"do_":121,"switch_":122,"CASOS":123,"case_":124,"default_":125,"for_":126,"FOR_P":127,"FOR_LET":128,"FOR_CONST":129,"FOR_TRADICIONAL":130,"FOR_OF":131,"FOR_TRADICIONAL_INC":132,"of_":133,"in_":134,"break_":135,"continue_":136,"return_":137,"RETURN_P":138,"console_":139,"log_":140,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"punto_coma",23:"type_",24:"id",25:"igual",26:"llave_abre",28:"llave_cierra",31:"coma_",32:"dos_puntos",34:"const_",37:"let_",41:"function_",42:"par_abre",44:"par_cierra",49:"or_",52:"and_",55:"interrogacion_",60:"mas",61:"menos",64:"por",65:"div",66:"mod",69:"pot",71:"not_",72:"num",73:"bool",74:"str",75:"null_",79:"incremento_",80:"decremento_",81:"cor_abre",83:"cor_cierra",92:"punto_",94:"push_",95:"pop_",96:"length_",100:"menos_igual",101:"mas_igual",102:"number_",104:"string_",105:"boolean_",106:"void_",107:"menor",108:"mayor",109:"menor_igual",110:"mayor_igual",111:"igual_igual",112:"diferente",116:"if_",118:"else_",120:"while_",121:"do_",122:"switch_",124:"case_",125:"default_",126:"for_",133:"of_",134:"in_",135:"break_",136:"continue_",137:"return_",139:"console_",140:"log_"},
productions_: [0,[3,2],[4,2],[4,0],[6,2],[6,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,3],[6,2],[10,6],[27,2],[30,3],[30,0],[29,3],[7,3],[7,3],[36,3],[36,0],[35,2],[38,2],[38,3],[38,0],[40,2],[40,0],[9,10],[43,2],[43,0],[46,3],[46,0],[45,3],[39,2],[48,2],[48,0],[47,2],[51,2],[51,0],[50,2],[54,4],[54,0],[53,3],[53,1],[56,2],[59,3],[59,3],[59,0],[58,2],[63,3],[63,3],[63,3],[63,0],[62,2],[68,3],[68,0],[67,1],[67,2],[67,2],[70,3],[70,1],[70,1],[70,1],[70,1],[70,1],[70,2],[70,1],[78,1],[78,0],[21,1],[21,1],[21,0],[76,3],[82,2],[82,0],[84,3],[84,0],[77,3],[85,2],[87,3],[87,0],[86,3],[20,2],[88,2],[88,2],[90,2],[90,0],[93,3],[93,3],[93,2],[93,1],[91,4],[91,0],[89,3],[97,2],[97,0],[98,3],[98,0],[11,3],[99,1],[99,1],[99,1],[33,2],[33,2],[33,2],[33,2],[33,1],[103,3],[103,0],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[113,3],[114,3],[115,3],[12,2],[117,2],[117,0],[119,2],[119,1],[13,3],[14,4],[15,5],[123,5],[123,3],[123,0],[16,3],[127,2],[127,2],[128,1],[128,1],[130,9],[132,1],[132,1],[131,5],[129,5],[17,1],[18,1],[19,2],[138,1],[138,0],[22,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
   
break;
case 108: case 109: case 110: case 111:
this.$=$$[$0-1];
break;
case 112:
this.$=$$[$0];
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,22:17,23:$V1,24:$V2,34:$V3,37:$V4,41:$V5,115:22,116:$V6,120:$V7,121:$V8,122:$V9,126:$Va,135:$Vb,136:$Vc,137:$Vd,139:$Ve},{1:[3]},{5:[1,33]},o($Vf,$V0,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,22:17,115:22,4:34,23:$V1,24:$V2,34:$V3,37:$V4,41:$V5,116:$V6,120:$V7,121:$V8,122:$V9,126:$Va,135:$Vb,136:$Vc,137:$Vd,139:$Ve}),{8:[1,35]},o($Vg,[2,5]),{8:[1,36]},{8:[1,37]},o($Vg,[2,8]),o($Vg,[2,9]),{8:[1,38]},o($Vg,[2,11]),o($Vg,[2,12]),{8:[1,39]},{8:[1,40]},{8:[1,41]},{8:$Vh,21:42,25:$Vi,79:$Vj,80:$Vk,99:43,100:$Vl,101:$Vm},{8:[1,49]},{24:$Vn,35:50},{24:$Vn,35:52},{24:[1,53]},{24:[1,54]},o($Vg,$Vo,{117:55,118:$Vp}),{42:$Vq,114:57},{26:$Vr,113:59},{42:$Vq,114:61},{42:[1,62]},{8:[2,145]},{8:[2,146]},{8:[2,149],20:81,24:$V2,26:$Vs,39:64,42:$Vt,47:65,50:66,53:67,56:68,58:69,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA,138:63},o($VB,$VC,{88:85,89:86,91:87,42:$VD,81:$VE}),{92:[1,90]},{42:$Vq,114:91},{1:[2,1]},o($Vf,[2,2]),o($Vg,[2,4]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,10]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,15]),{8:[1,92]},{20:81,24:$V2,26:$Vs,39:93,42:$Vt,47:65,50:66,53:67,56:68,58:69,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},o($VF,[2,75]),o($VF,[2,76]),o($VG,[2,105]),o($VG,[2,106]),o($VG,[2,107]),o($Vg,[2,17]),{8:$VH,31:$VI,36:94},o($VJ,[2,30],{38:96,25:[1,97],32:[1,98]}),{8:$VH,31:$VI,36:99},{42:[1,100]},{25:[1,101]},o($Vg,[2,124]),{26:$Vr,113:104,115:103,116:$V6,119:102},{26:$Vr,113:105},{20:81,24:$V2,26:$Vs,39:106,42:$Vt,47:65,50:66,53:67,56:68,58:69,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},{120:[1,107]},{4:108,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,22:17,23:$V1,24:$V2,28:$V0,34:$V3,37:$V4,41:$V5,115:22,116:$V6,120:$V7,121:$V8,122:$V9,126:$Va,135:$Vb,136:$Vc,137:$Vd,139:$Ve},{26:[1,109]},{34:[1,112],37:[1,111],127:110},{8:[2,147]},{8:[2,148]},o($VK,[2,41],{48:113,49:[1,114]}),o($VL,[2,44],{51:115,52:[1,116]}),o($VM,[2,47],{54:117,55:[1,118]}),o($VN,[2,49],{57:119,107:[1,120],108:[1,121],109:[1,122],110:[1,123],111:[1,124],112:[1,125]}),o($VO,$VP,{59:126,60:$VQ,61:$VR}),o($VS,$VT,{63:129,64:$VU,65:$VV,66:$VW}),o($VX,$VY,{68:133,69:$VZ}),o($VF,[2,62]),{20:81,24:$V2,26:$Vs,42:$Vt,70:135,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},{20:81,24:$V2,26:$Vs,42:$Vt,70:136,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},{20:81,24:$V2,26:$Vs,39:137,42:$Vt,47:65,50:66,53:67,56:68,58:69,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},o($VF,[2,66]),o($VF,[2,67]),o($VF,[2,68]),o($VF,[2,69]),o($VF,[2,70]),o($VF,$Vh,{21:138,79:$Vj,80:$Vk}),o($VF,[2,72]),{20:81,24:$V2,26:$Vs,39:140,42:$Vt,47:65,50:66,53:67,56:68,58:69,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA,82:139,83:[2,80]},{24:$V_,85:141,86:142},o($V$,[2,88]),o($V$,$V01,{90:144,92:$V11}),o($V$,$V01,{90:146,92:$V11}),{20:81,24:$V2,26:$Vs,39:148,42:$Vt,44:[2,101],47:65,50:66,53:67,56:68,58:69,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA,97:147},{20:81,24:$V2,26:$Vs,39:149,42:$Vt,47:65,50:66,53:67,56:68,58:69,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},{140:[1,150]},{26:$Vr,113:151},o($Vg,[2,16]),o([8,44],[2,104]),{8:[2,23]},{24:$Vn,35:152},o($VJ,[2,27]),{20:81,24:$V2,26:$Vs,39:153,42:$Vt,47:65,50:66,53:67,56:68,58:69,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},{24:$V21,33:154,102:$V31,104:$V41,105:$V51,106:$V61},{8:[2,24]},{24:$V71,43:160,44:[2,35],45:161},{26:[1,163]},o($Vg,[2,125]),o($Vg,$Vo,{117:164,118:$Vp}),o($Vg,[2,128]),o($Vg,[2,129]),{44:[1,165]},{42:$Vq,114:166},{28:[1,167]},{28:$V81,123:168,124:$V91,125:$Va1},o($Vg,[2,135]),{24:[1,174],128:171,130:172,131:173},{24:[1,176],129:175},o($VK,[2,39]),{20:81,24:$V2,26:$Vs,39:177,42:$Vt,47:65,50:66,53:67,56:68,58:69,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},o($VL,[2,42]),{20:81,24:$V2,26:$Vs,42:$Vt,47:178,50:66,53:67,56:68,58:69,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},o($VM,[2,45]),{20:81,24:$V2,26:$Vs,42:$Vt,53:179,56:68,58:69,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},{20:81,24:$V2,26:$Vs,42:$Vt,56:180,58:69,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},o($VG,[2,115]),o($VG,[2,116]),o($VG,[2,117]),o($VG,[2,118]),o($VG,[2,119]),o($VG,[2,120]),o($VO,[2,50]),{20:81,24:$V2,26:$Vs,42:$Vt,58:181,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},{20:81,24:$V2,26:$Vs,42:$Vt,58:182,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},o($VS,[2,54]),{20:81,24:$V2,26:$Vs,42:$Vt,61:$Vu,62:183,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},{20:81,24:$V2,26:$Vs,42:$Vt,61:$Vu,62:184,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},{20:81,24:$V2,26:$Vs,42:$Vt,61:$Vu,62:185,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},o($VX,[2,59]),{20:81,24:$V2,26:$Vs,42:$Vt,61:$Vu,67:186,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},o($VF,[2,63]),o($VF,[2,64]),{44:[1,187]},o($VF,[2,71]),{83:[1,188]},{31:$Vb1,83:$Vc1,84:189},{28:[1,191]},{28:$Vd1,31:$Ve1,87:192},{32:[1,194]},o($V$,[2,89]),{24:[1,196],93:195,94:[1,197],95:[1,198],96:[1,199]},o($V$,[2,90]),{44:[1,200]},{31:$Vf1,44:$Vg1,98:201},{83:[1,203]},{42:$VD,89:204},o($Vh1,[2,123]),{8:$VH,31:$VI,36:205},o($VJ,[2,28]),o($VJ,[2,32],{40:206,25:[1,207]}),o($Vi1,$Vj1,{103:208,81:$Vk1}),o($Vi1,$Vj1,{103:210,81:$Vk1}),o($Vi1,$Vj1,{103:211,81:$Vk1}),o($Vi1,$Vj1,{103:212,81:$Vk1}),o($Vi1,[2,112]),{44:[1,213]},{31:$Vl1,44:$Vm1,46:214},{32:[1,216]},{24:$Vn1,27:217,29:218},o($Vg,[2,127]),o([8,26],[2,122]),{8:[2,130]},o($Vh1,[2,121]),{28:[1,220]},{20:81,24:$V2,26:$Vs,39:221,42:$Vt,47:65,50:66,53:67,56:68,58:69,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},{32:[1,222]},o($Vg,[2,136]),o($Vg,[2,138]),o($Vg,[2,139]),{25:[1,223],133:[1,224]},o($Vg,[2,137]),{134:[1,225]},o($VK,[2,40]),o($VL,[2,43]),{32:[1,226]},o($VN,[2,48]),o($VO,$VP,{59:227,60:$VQ,61:$VR}),o($VO,$VP,{59:228,60:$VQ,61:$VR}),o($VS,$VT,{63:229,64:$VU,65:$VV,66:$VW}),o($VS,$VT,{63:230,64:$VU,65:$VV,66:$VW}),o($VS,$VT,{63:231,64:$VU,65:$VV,66:$VW}),o($VX,$VY,{68:232,69:$VZ}),o($VF,[2,65]),o($VF,[2,78]),{83:[2,79]},{20:81,24:$V2,26:$Vs,39:233,42:$Vt,47:65,50:66,53:67,56:68,58:69,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},o($VF,[2,83]),{28:[2,84]},{24:$V_,86:234},{20:81,24:$V2,26:$Vs,39:235,42:$Vt,47:65,50:66,53:67,56:68,58:69,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},o($V$,[2,91]),o($VB,$VC,{91:236,81:$VE}),{42:$VD,89:237},o($V$,$V01,{90:238,92:$V11}),o($V$,[2,96]),o($VB,[2,99]),{44:[2,100]},{20:81,24:$V2,26:$Vs,39:239,42:$Vt,47:65,50:66,53:67,56:68,58:69,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},o($VB,$VC,{91:240,81:$VE}),{8:[2,150]},{8:[2,25]},o($VJ,[2,29]),{20:81,24:$V2,26:$Vs,39:241,42:$Vt,47:65,50:66,53:67,56:68,58:69,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},o($Vi1,[2,108]),{83:[1,242]},o($Vi1,[2,109]),o($Vi1,[2,110]),o($Vi1,[2,111]),{32:[1,243]},{44:[2,34]},{24:$V71,45:244},{24:$V21,33:245,102:$V31,104:$V41,105:$V51,106:$V61},{28:[1,246]},{28:$Vo1,30:247,31:$Vp1},{32:[1,249]},o($Vg,[2,131]),{32:[1,250]},{4:251,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,22:17,23:$V1,24:$V2,28:$V0,34:$V3,37:$V4,41:$V5,115:22,116:$V6,120:$V7,121:$V8,122:$V9,126:$Va,135:$Vb,136:$Vc,137:$Vd,139:$Ve},{20:81,24:$V2,26:$Vs,39:252,42:$Vt,47:65,50:66,53:67,56:68,58:69,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},{24:[1,253]},{24:[1,254]},{20:81,24:$V2,26:$Vs,42:$Vt,53:255,56:68,58:69,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},o($VO,[2,51]),o($VO,[2,52]),o($VS,[2,55]),o($VS,[2,56]),o($VS,[2,57]),o($VX,[2,60]),{31:$Vb1,83:$Vc1,84:256},{28:$Vd1,31:$Ve1,87:257},o($Vq1,[2,87]),o($V$,$V01,{90:258,92:$V11}),o($V$,$V01,{90:259,92:$V11}),o($V$,[2,95]),{31:$Vf1,44:$Vg1,98:260},o($VB,[2,97]),o($VJ,[2,31]),o($Vi1,$Vj1,{103:261,81:$Vk1}),{24:$V21,33:262,102:$V31,104:$V41,105:$V51,106:$V61},{31:$Vl1,44:$Vm1,46:263},o([31,44],[2,38]),{8:[2,18]},{28:[2,19]},{24:$Vn1,29:264},{24:$V21,33:265,102:$V31,104:$V41,105:$V51,106:$V61},o([28,124,125],$V0,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,22:17,115:22,4:266,23:$V1,24:$V2,34:$V3,37:$V4,41:$V5,116:$V6,120:$V7,121:$V8,122:$V9,126:$Va,135:$Vb,136:$Vc,137:$Vd,139:$Ve}),{28:[2,133]},{8:[1,267]},{44:[1,268]},{44:[1,269]},o($VM,[2,46]),{83:[2,81]},{28:[2,85]},o($V$,[2,93]),o($V$,[2,94]),{44:[2,102]},o($Vi1,[2,113]),{26:[1,270]},{44:[2,36]},{28:$Vo1,30:271,31:$Vp1},o($Vq1,[2,22]),{28:$V81,123:272,124:$V91,125:$Va1},{20:81,24:$V2,26:$Vs,39:273,42:$Vt,47:65,50:66,53:67,56:68,58:69,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA},{26:$Vr,113:274},{26:$Vr,113:275},{4:276,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,22:17,23:$V1,24:$V2,28:$V0,34:$V3,37:$V4,41:$V5,115:22,116:$V6,120:$V7,121:$V8,122:$V9,126:$Va,135:$Vb,136:$Vc,137:$Vd,139:$Ve},{28:[2,20]},{28:[2,132]},{8:[1,277]},o($Vg,[2,143]),o($Vg,[2,144]),{28:[1,278]},{11:280,20:282,24:$V2,26:$Vs,39:281,42:$Vt,47:65,50:66,53:67,56:68,58:69,61:$Vu,62:70,67:71,70:72,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:80,77:82,81:$VA,132:279},o($Vg,[2,33]),{44:[1,283]},{44:[2,141]},{44:[2,142]},o([44,49,52,55,60,61,64,65,66,69,107,108,109,110,111,112],$Vh,{99:43,21:138,25:$Vi,79:$Vj,80:$Vk,100:$Vl,101:$Vm}),{26:$Vr,113:284},o($Vg,[2,140])],
defaultActions: {27:[2,145],28:[2,146],33:[2,1],63:[2,147],64:[2,148],94:[2,23],99:[2,24],166:[2,130],189:[2,79],192:[2,84],201:[2,100],204:[2,150],205:[2,25],214:[2,34],246:[2,18],247:[2,19],251:[2,133],256:[2,81],257:[2,85],260:[2,102],263:[2,36],271:[2,20],272:[2,132],280:[2,141],281:[2,142]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip linecoment */
break;
case 2:/*skip multi line coment*/
break;
case 3:return	'let_'
break;
case 4:return	'const_'
break;
case 5:return	'number_'
break;
case 6:return	'string_'
break;
case 7:return	'boolean_'
break;
case 8:return  'void_'
break;
case 9:return 75
break;
case 10:return 23
break;
case 11:return 94
break;
case 12:return 95
break;
case 13:return 96
break;
case 14:return 31
break;
case 15:return 92
break;
case 16:return 41
break;
case 17:return	'if_'
break;
case 18:return	'else_'
break;
case 19:return	'switch_'
break;
case 20:return	'case_'
break;
case 21:return	'default_'
break;
case 22:return	'while_'
break;
case 23:return	'do_'
break;
case 24:return	'for_'
break;
case 25:return	'in_'
break;
case 26:return	'of_'
break;
case 27:return	'return_'
break;
case 28:return	'break_'
break;
case 29:return	'continue_'
break;
case 30:return  'console_'
break;
case 31:return  'log_'
break;
case 32:return	'menor_igual'
break;
case 33:return	'menor'
break;
case 34:return	'mayor_igual'
break;
case 35:return	'mayor'
break;
case 36:return	'igual_igual'
break;
case 37:return	'diferente'
break;
case 38:return 	'incremento_'
break;
case 39:return 	'decremento_'
break;
case 40:return	'cor_abre'
break;
case 41:return	'cor_cierra'
break;
case 42:return	'llave_abre'
break;
case 43:return	'llave_cierra'
break;
case 44:return	'par_abre'
break;
case 45:return	'par_cierra'
break;
case 46:return	'and_'
break;
case 47:return	'or_'
break;
case 48:return	'not_'
break;
case 49:return	'interrogacion_'
break;
case 50:return 101
break;
case 51:return 100
break;
case 52:return 25
break;
case 53:return 32
break;
case 54:return 8
break;
case 55:return 69
break;
case 56:return 64
break;
case 57:return 65
break;
case 58:return 61
break;
case 59:return 60
break;
case 60:return 66
break;
case 61:return 73
break;
case 62:return 72
break;
case 63:return 74
break;
case 64:return 74
break;
case 65:return 74
break;
case 66:return 74
break;
case 67:return 74
break;
case 68:return 24
break;
case 69:return 5
break;
case 70:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/([^[\n\r])*(\r|\n|\r\n)?)/,/^(?:\/\*[^'?']*\*\/)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:null\b)/,/^(?:type\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:,)/,/^(?:\.)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:\+=)/,/^(?:-=)/,/^(?:=)/,/^(?::)/,/^(?:;)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:true|false\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:“[^\"\n]*”)/,/^(?:"[^\"\n]*")/,/^(?:'[^''\n]*')/,/^(?:‘[^''\n]*’)/,/^(?:`[^''\n]*`)/,/^(?:[a-zA-Z]([a-zA-Z0-9]|_)*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analyzer;
exports.Parser = analyzer.Parser;
exports.parse = function () { return analyzer.parse.apply(analyzer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}