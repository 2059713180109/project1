/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analyzer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,19],$V2=[1,20],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,29],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[5,25,114,115],$Vf=[5,20,21,25,30,33,38,106,110,111,112,114,115,116,125,126,127],$Vg=[1,41],$Vh=[1,45],$Vi=[2,112],$Vj=[1,47],$Vk=[1,49],$Vl=[1,51],$Vm=[1,74],$Vn=[1,66],$Vo=[1,64],$Vp=[1,65],$Vq=[1,67],$Vr=[1,68],$Vs=[1,69],$Vt=[1,70],$Vu=[1,73],$Vv=[2,23],$Vw=[1,77],$Vx=[8,29],$Vy=[8,26,29,41,80],$Vz=[8,26,29,41,46,80],$VA=[8,26,29,41,46,49,80],$VB=[8,26,29,41,46,49,52,80],$VC=[8,26,29,41,46,49,52,80,97,98,99,100,101,102],$VD=[2,50],$VE=[1,110],$VF=[1,111],$VG=[8,26,29,41,46,49,52,57,58,80,97,98,99,100,101,102],$VH=[2,55],$VI=[1,113],$VJ=[1,114],$VK=[1,115],$VL=[8,26,29,41,46,49,52,57,58,61,62,63,80,97,98,99,100,101,102],$VM=[2,58],$VN=[1,117],$VO=[8,26,29,41,46,49,52,57,58,61,62,63,65,80,97,98,99,100,101,102],$VP=[8,26,29,41,46,49,52,57,58,61,62,63,65,76,77,80,86,97,98,99,100,101,102],$VQ=[2,89],$VR=[1,129],$VS=[1,130],$VT=[1,138],$VU=[1,135],$VV=[1,136],$VW=[1,137],$VX=[1,139],$VY=[1,142],$VZ=[2,120],$V_=[1,149],$V$=[1,150],$V01=[21,39,58,67,68,69,70,71,78],$V11=[1,170],$V21=[2,78],$V31=[8,26,29,41,46,49,52,57,58,61,62,63,65,76,77,80,97,98,99,100,101,102],$V41=[2,83],$V51=[1,172],$V61=[5,20,21,25,30,33,38,106,108,110,111,112,114,115,116,125,126,127],$V71=[8,22,23,25,29,41],$V81=[1,182],$V91=[2,34],$Va1=[1,207],$Vb1=[2,94],$Vc1=[2,19],$Vd1=[1,242];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"DEC_DECLAVAR":7,"punto_coma":8,"DEC_FUN":9,"DEC_TYPE":10,"ASIGNACION":11,"IF":12,"WHILE":13,"DO_WHILE":14,"SWITCH":15,"FOR":16,"BREAK":17,"CONTINUE":18,"RETURN":19,"type_":20,"id":21,"igual":22,"llave_abre":23,"LIST_ATRIBUTOS":24,"llave_cierra":25,"dos_puntos":26,"TDATO":27,"LIST_ATRIBUTOS_P":28,"coma_":29,"const_":30,"D_VAR":31,"LIST_VAR":32,"let_":33,"D_VAR_P1":34,"T":35,"D_VAR_P2":36,"CONDICION_OR":37,"function_":38,"par_abre":39,"LIST_PAR":40,"par_cierra":41,"PARAM":42,"LIST_PAR_P":43,"CONDICION_AND":44,"CONDICION_OR_P":45,"or_":46,"CONDICION":47,"CONDICION_AND_P":48,"and_":49,"COND":50,"TERNARIO":51,"interrogacion_":52,"E":53,"SIG_REL":54,"F":55,"E_P":56,"mas":57,"menos":58,"R":59,"F_P":60,"por":61,"div":62,"mod":63,"R_P":64,"pot":65,"T_P":66,"not_":67,"num":68,"bool":69,"str":70,"null_":71,"ARREGLO":72,"OBJETO_FUNCION":73,"UNARIO":74,"NEGATIVO":75,"incremento_":76,"decremento_":77,"cor_abre":78,"ELEMENTOS":79,"cor_cierra":80,"ELEMENTOS_P":81,"OBJ_FUN_CUERPO":82,"PARAMETROS_FUNCION":83,"SUB_OBJETO":84,"DIMENSION":85,"punto_":86,"OB_ATRIBUTO":87,"push_":88,"pop_":89,"length_":90,"ARGUMENTOS":91,"ARGUMENTOS_P":92,"number_":93,"string_":94,"boolean_":95,"void_":96,"menor":97,"mayor":98,"menor_igual":99,"mayor_igual":100,"igual_igual":101,"diferente":102,"IF_SENTENCE":103,"IF_CONDICION":104,"IF_STATEMENT":105,"if_":106,"ELSE_IF":107,"else_":108,"ELSE_IF_P":109,"while_":110,"do_":111,"switch_":112,"CASOS":113,"case_":114,"default_":115,"for_":116,"FOR_P":117,"FOR_LET":118,"FOR_CONST":119,"FOR_TRADICIONAL":120,"FOR_OF":121,"FOR_TRADICIONAL_INC":122,"of_":123,"in_":124,"break_":125,"continue_":126,"return_":127,"RETURN_P":128,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"punto_coma",20:"type_",21:"id",22:"igual",23:"llave_abre",25:"llave_cierra",26:"dos_puntos",29:"coma_",30:"const_",33:"let_",38:"function_",39:"par_abre",41:"par_cierra",46:"or_",49:"and_",52:"interrogacion_",57:"mas",58:"menos",61:"por",62:"div",63:"mod",65:"pot",67:"not_",68:"num",69:"bool",70:"str",71:"null_",76:"incremento_",77:"decremento_",78:"cor_abre",80:"cor_cierra",86:"punto_",88:"push_",89:"pop_",90:"length_",93:"number_",94:"string_",95:"boolean_",96:"void_",97:"menor",98:"mayor",99:"menor_igual",100:"mayor_igual",101:"igual_igual",102:"diferente",106:"if_",108:"else_",110:"while_",111:"do_",112:"switch_",114:"case_",115:"default_",116:"for_",123:"of_",124:"in_",125:"break_",126:"continue_",127:"return_"},
productions_: [0,[3,2],[4,2],[4,0],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[10,6],[24,4],[28,5],[28,0],[7,3],[7,3],[32,3],[32,0],[31,2],[34,2],[34,3],[34,0],[36,2],[36,0],[9,10],[40,2],[40,0],[43,3],[43,0],[42,3],[37,2],[45,2],[45,0],[44,2],[48,2],[48,0],[47,2],[51,4],[51,0],[50,3],[50,1],[53,2],[56,3],[56,3],[56,0],[55,2],[60,3],[60,3],[60,3],[60,0],[59,2],[64,3],[64,0],[35,1],[35,2],[35,2],[66,3],[66,1],[66,1],[66,1],[66,1],[66,1],[66,2],[75,1],[75,0],[74,1],[74,1],[74,0],[72,3],[79,2],[79,0],[81,3],[81,0],[73,2],[82,2],[82,2],[84,2],[84,0],[87,3],[87,3],[87,3],[87,3],[85,4],[85,0],[83,3],[91,2],[91,0],[92,3],[92,0],[11,3],[27,1],[27,1],[27,1],[27,1],[27,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[103,3],[104,3],[105,3],[12,2],[107,2],[107,0],[109,2],[109,1],[13,3],[14,4],[15,5],[113,5],[113,3],[113,0],[16,3],[117,2],[117,2],[118,1],[118,1],[120,9],[122,1],[122,1],[121,5],[119,5],[17,1],[18,1],[19,2],[128,1],[128,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
   
break;
case 96: case 97: case 98: case 99: case 100:
this.$=$$[$0];
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,30:$V3,33:$V4,38:$V5,105:21,106:$V6,110:$V7,111:$V8,112:$V9,116:$Va,125:$Vb,126:$Vc,127:$Vd},{1:[3]},{5:[1,30]},o($Ve,$V0,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,105:21,4:31,20:$V1,21:$V2,30:$V3,33:$V4,38:$V5,106:$V6,110:$V7,111:$V8,112:$V9,116:$Va,125:$Vb,126:$Vc,127:$Vd}),{8:[1,32]},{8:[1,33]},{8:[1,34]},{8:[1,35]},o($Vf,[2,8]),o($Vf,[2,9]),{8:[1,36]},o($Vf,[2,11]),o($Vf,[2,12]),{8:[1,37]},{8:[1,38]},{8:[1,39]},{21:$Vg,31:40},{21:$Vg,31:42},{21:[1,43]},{21:[1,44]},{22:$Vh},o($Vf,$Vi,{107:46,108:$Vj}),{39:$Vk,104:48},{23:$Vl,103:50},{39:$Vk,104:52},{39:[1,53]},{8:[2,131]},{8:[2,132]},{8:[2,135],21:$Vm,35:62,37:55,39:$Vn,44:56,47:57,50:58,53:59,55:60,58:$Vo,59:61,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu,128:54},{39:$Vk,104:75},{1:[2,1]},o($Ve,[2,2]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,10]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),{8:$Vv,29:$Vw,32:76},o($Vx,[2,27],{34:78,22:[1,79],26:[1,80]}),{8:$Vv,29:$Vw,32:81},{39:[1,82]},{22:[1,83]},{21:$Vm,35:62,37:84,39:$Vn,44:56,47:57,50:58,53:59,55:60,58:$Vo,59:61,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},o($Vf,[2,110]),{23:$Vl,103:87,105:86,106:$V6,109:85},{23:$Vl,103:88},{21:$Vm,35:62,37:89,39:$Vn,44:56,47:57,50:58,53:59,55:60,58:$Vo,59:61,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},{110:[1,90]},{4:91,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,25:$V0,30:$V3,33:$V4,38:$V5,105:21,106:$V6,110:$V7,111:$V8,112:$V9,116:$Va,125:$Vb,126:$Vc,127:$Vd},{23:[1,92]},{30:[1,95],33:[1,94],117:93},{8:[2,133]},{8:[2,134]},o($Vy,[2,38],{45:96,46:[1,97]}),o($Vz,[2,41],{48:98,49:[1,99]}),o($VA,[2,44],{51:100,52:[1,101]}),o($VB,[2,46],{54:102,97:[1,103],98:[1,104],99:[1,105],100:[1,106],101:[1,107],102:[1,108]}),o($VC,$VD,{56:109,57:$VE,58:$VF}),o($VG,$VH,{60:112,61:$VI,62:$VJ,63:$VK}),o($VL,$VM,{64:116,65:$VN}),o($VO,[2,59]),{21:$Vm,39:$Vn,66:118,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},{21:$Vm,39:$Vn,66:119,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},{21:$Vm,35:62,37:120,39:$Vn,44:56,47:57,50:58,53:59,55:60,58:$Vo,59:61,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},o($VO,[2,63]),o($VO,[2,64]),o($VO,[2,65]),o($VO,[2,66]),o($VO,[2,67]),o($VO,[2,73],{74:121,76:[1,122],77:[1,123]}),{21:$Vm,35:62,37:125,39:$Vn,44:56,47:57,50:58,53:59,55:60,58:$Vo,59:61,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu,79:124,80:[2,76]},o($VP,$VQ,{82:126,83:127,85:128,39:$VR,78:$VS}),{23:$Vl,103:131},{8:[2,20]},{21:$Vg,31:132},o($Vx,[2,24]),{21:$Vm,35:133,39:$Vn,58:$Vo,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},{21:$VT,27:134,93:$VU,94:$VV,95:$VW,96:$VX},{8:[2,21]},{21:$VY,40:140,41:[2,32],42:141},{23:[1,143]},o([8,41],[2,95]),o($Vf,[2,111]),o($Vf,$Vi,{107:144,108:$Vj}),o($Vf,[2,114]),o($Vf,[2,115]),{41:[1,145]},{39:$Vk,104:146},{25:[1,147]},{25:$VZ,113:148,114:$V_,115:$V$},o($Vf,[2,121]),{21:[1,154],118:151,120:152,121:153},{21:[1,156],119:155},o($Vy,[2,36]),{21:$Vm,35:62,37:157,39:$Vn,44:56,47:57,50:58,53:59,55:60,58:$Vo,59:61,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},o($Vz,[2,39]),{21:$Vm,35:62,39:$Vn,44:158,47:57,50:58,53:59,55:60,58:$Vo,59:61,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},o($VA,[2,42]),{21:$Vm,35:62,39:$Vn,50:159,53:59,55:60,58:$Vo,59:61,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},{21:$Vm,35:62,39:$Vn,53:160,55:60,58:$Vo,59:61,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},o($V01,[2,101]),o($V01,[2,102]),o($V01,[2,103]),o($V01,[2,104]),o($V01,[2,105]),o($V01,[2,106]),o($VC,[2,47]),{21:$Vm,35:62,39:$Vn,55:161,58:$Vo,59:61,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},{21:$Vm,35:62,39:$Vn,55:162,58:$Vo,59:61,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},o($VG,[2,51]),{21:$Vm,35:62,39:$Vn,58:$Vo,59:163,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},{21:$Vm,35:62,39:$Vn,58:$Vo,59:164,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},{21:$Vm,35:62,39:$Vn,58:$Vo,59:165,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},o($VL,[2,56]),{21:$Vm,35:166,39:$Vn,58:$Vo,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},o($VO,[2,60]),o($VO,[2,61]),{41:[1,167]},o($VO,[2,68]),o($VO,[2,71]),o($VO,[2,72]),{80:[1,168]},{29:$V11,80:$V21,81:169},o($V31,[2,79]),o($V31,$V41,{84:171,86:$V51}),o($V31,$V41,{84:173,86:$V51}),{21:$Vm,35:62,37:175,39:$Vn,41:[2,92],44:56,47:57,50:58,53:59,55:60,58:$Vo,59:61,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu,91:174},{21:$Vm,35:62,37:176,39:$Vn,44:56,47:57,50:58,53:59,55:60,58:$Vo,59:61,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},o($V61,[2,109]),{8:$Vv,29:$Vw,32:177},o($Vx,[2,25]),o($Vx,[2,29],{36:178,22:[1,179]}),o($V71,[2,96]),o($V71,[2,97]),o($V71,[2,98]),o($V71,[2,99]),o($V71,[2,100]),{41:[1,180]},{29:$V81,41:$V91,43:181},{26:[1,183]},{21:[1,185],24:184},o($Vf,[2,113]),o([8,23],[2,108]),{8:[2,116]},o($V61,[2,107]),{25:[1,186]},{21:$Vm,35:62,37:187,39:$Vn,44:56,47:57,50:58,53:59,55:60,58:$Vo,59:61,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},{26:[1,188]},o($Vf,[2,122]),o($Vf,[2,124]),o($Vf,[2,125]),{22:[1,189],123:[1,190]},o($Vf,[2,123]),{124:[1,191]},o($Vy,[2,37]),o($Vz,[2,40]),{26:[1,192]},o($VB,[2,45]),o($VC,$VD,{56:193,57:$VE,58:$VF}),o($VC,$VD,{56:194,57:$VE,58:$VF}),o($VG,$VH,{60:195,61:$VI,62:$VJ,63:$VK}),o($VG,$VH,{60:196,61:$VI,62:$VJ,63:$VK}),o($VG,$VH,{60:197,61:$VI,62:$VJ,63:$VK}),o($VL,$VM,{64:198,65:$VN}),o($VO,[2,62]),o($VO,[2,74]),{80:[2,75]},{21:$Vm,35:62,37:199,39:$Vn,44:56,47:57,50:58,53:59,55:60,58:$Vo,59:61,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},o($V31,[2,80]),{21:[1,201],87:200,88:[1,202],89:[1,203],90:[1,204]},o($V31,[2,81]),{41:[1,205]},{29:$Va1,41:$Vb1,92:206},{80:[1,208]},{8:[2,22]},o($Vx,[2,26]),{21:$Vm,35:62,37:209,39:$Vn,44:56,47:57,50:58,53:59,55:60,58:$Vo,59:61,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},{26:[1,210]},{41:[2,31]},{21:$VY,42:211},{21:$VT,27:212,93:$VU,94:$VV,95:$VW,96:$VX},{25:[1,213]},{26:[1,214]},o($Vf,[2,117]),{26:[1,215]},{4:216,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,25:$V0,30:$V3,33:$V4,38:$V5,105:21,106:$V6,110:$V7,111:$V8,112:$V9,116:$Va,125:$Vb,126:$Vc,127:$Vd},{21:$Vm,35:62,37:217,39:$Vn,44:56,47:57,50:58,53:59,55:60,58:$Vo,59:61,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},{21:[1,218]},{21:[1,219]},{21:$Vm,35:62,39:$Vn,50:220,53:59,55:60,58:$Vo,59:61,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},o($VC,[2,48]),o($VC,[2,49]),o($VG,[2,52]),o($VG,[2,53]),o($VG,[2,54]),o($VL,[2,57]),{29:$V11,80:$V21,81:221},o($V31,[2,82]),o($VP,$VQ,{85:222,78:$VS}),{39:$VR,83:223},{39:$VR,83:224},{39:$VR,83:225},o($VP,[2,90]),{41:[2,91]},{21:$Vm,35:62,37:226,39:$Vn,44:56,47:57,50:58,53:59,55:60,58:$Vo,59:61,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},o($VP,$VQ,{85:227,78:$VS}),o($Vx,[2,28]),{21:$VT,27:228,93:$VU,94:$VV,95:$VW,96:$VX},{29:$V81,41:$V91,43:229},o([29,41],[2,35]),{8:[2,16]},{21:$VT,27:230,93:$VU,94:$VV,95:$VW,96:$VX},o([25,114,115],$V0,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,105:21,4:231,20:$V1,21:$V2,30:$V3,33:$V4,38:$V5,106:$V6,110:$V7,111:$V8,112:$V9,116:$Va,125:$Vb,126:$Vc,127:$Vd}),{25:[2,119]},{8:[1,232]},{41:[1,233]},{41:[1,234]},o($VA,[2,43]),{80:[2,77]},o($V31,$V41,{84:235,86:$V51}),o($V31,$V41,{84:236,86:$V51}),o($V31,$V41,{84:237,86:$V51}),o($V31,$V41,{84:238,86:$V51}),{29:$Va1,41:$Vb1,92:239},o($VP,[2,88]),{23:[1,240]},{41:[2,33]},{25:$Vc1,28:241,29:$Vd1},{25:$VZ,113:243,114:$V_,115:$V$},{21:$Vm,35:62,37:244,39:$Vn,44:56,47:57,50:58,53:59,55:60,58:$Vo,59:61,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu},{23:$Vl,103:245},{23:$Vl,103:246},o($V31,[2,84]),o($V31,[2,85]),o($V31,[2,86]),o($V31,[2,87]),{41:[2,93]},{4:247,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,25:$V0,30:$V3,33:$V4,38:$V5,105:21,106:$V6,110:$V7,111:$V8,112:$V9,116:$Va,125:$Vb,126:$Vc,127:$Vd},{25:[2,17]},{21:[1,248]},{25:[2,118]},{8:[1,249]},o($Vf,[2,129]),o($Vf,[2,130]),{25:[1,250]},{26:[1,251]},{11:253,21:[1,255],35:62,37:254,39:$Vn,44:56,47:57,50:58,53:59,55:60,58:$Vo,59:61,66:63,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:71,73:72,78:$Vu,122:252},{8:[2,30]},{21:$VT,27:256,93:$VU,94:$VV,95:$VW,96:$VX},{41:[1,257]},{41:[2,127]},{41:[2,128]},o([41,46,49,52,57,58,61,62,63,65,76,77,86,97,98,99,100,101,102],$VQ,{82:126,83:127,85:128,22:$Vh,39:$VR,78:$VS}),{25:$Vc1,28:258,29:$Vd1},{23:$Vl,103:259},{25:[2,18]},o($Vf,[2,126])],
defaultActions: {26:[2,131],27:[2,132],30:[2,1],54:[2,133],55:[2,134],76:[2,20],81:[2,21],146:[2,116],169:[2,75],177:[2,22],181:[2,31],206:[2,91],213:[2,16],216:[2,119],221:[2,77],229:[2,33],239:[2,93],241:[2,17],243:[2,118],250:[2,30],253:[2,127],254:[2,128],258:[2,18]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip linecoment */
break;
case 2:/*skip multi line coment*/
break;
case 3:return	'let_'
break;
case 4:return	'const_'
break;
case 5:return	'number_'
break;
case 6:return	'string_'
break;
case 7:return	'boolean_'
break;
case 8:return  'void_'
break;
case 9:return 71
break;
case 10:return 20
break;
case 11:return 88
break;
case 12:return 89
break;
case 13:return 90
break;
case 14:return 29
break;
case 15:return 86
break;
case 16:return 38
break;
case 17:return	'if_'
break;
case 18:return	'else_'
break;
case 19:return	'switch_'
break;
case 20:return	'case_'
break;
case 21:return	'default_'
break;
case 22:return	'while_'
break;
case 23:return	'do_'
break;
case 24:return	'for_'
break;
case 25:return	'in_'
break;
case 26:return	'of_'
break;
case 27:return	'return_'
break;
case 28:return	'break_'
break;
case 29:return	'continue_'
break;
case 30:return	'cor_abre'
break;
case 31:return	'cor_cierra'
break;
case 32:return	'llave_abre'
break;
case 33:return	'llave_cierra'
break;
case 34:return	'par_abre'
break;
case 35:return	'par_cierra'
break;
case 36:return	'and_'
break;
case 37:return	'or_'
break;
case 38:return	'not_'
break;
case 39:return	'interrogacion_'
break;
case 40:return	'menor_igual'
break;
case 41:return	'menor'
break;
case 42:return	'mayor_igual'
break;
case 43:return	'mayor'
break;
case 44:return	'igual_igual'
break;
case 45:return	'diferente'
break;
case 46:return 	'incremento_'
break;
case 47:return 	'decremento_'
break;
case 48:return 22
break;
case 49:return 26
break;
case 50:return 8
break;
case 51:return 65
break;
case 52:return 61
break;
case 53:return 62
break;
case 54:return 58
break;
case 55:return 57
break;
case 56:return 63
break;
case 57:return 69
break;
case 58:return 68
break;
case 59:return 70
break;
case 60:return 70
break;
case 61:return 70
break;
case 62:return 70
break;
case 63:return 21
break;
case 64:return 5
break;
case 65:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/([^[\n\r])*(\r|\n|\r\n)?)/,/^(?:\/\*[^'?']*\*\/)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:null\b)/,/^(?:type\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:,)/,/^(?:\.)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:=)/,/^(?::)/,/^(?:;)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:true|false\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:“[^\"\n]*”)/,/^(?:"[^\"\n]*")/,/^(?:'[^''\n]*')/,/^(?:‘[^''\n]*’)/,/^(?:[a-zA-Z]([a-zA-Z0-9]|_)*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analyzer;
exports.Parser = analyzer.Parser;
exports.parse = function () { return analyzer.parse.apply(analyzer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}