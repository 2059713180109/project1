/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analyzer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,10],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[5,10,20,23,28],$V6=[1,14],$V7=[2,14],$V8=[1,19],$V9=[5,10,19,20,23,28],$Va=[1,36],$Vb=[1,28],$Vc=[1,29],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[1,35],$Vh=[1,41],$Vi=[1,38],$Vj=[1,39],$Vk=[1,40],$Vl=[1,42],$Vm=[1,45],$Vn=[1,52],$Vo=[5,10,19,20,23,28,31,36,39,45,46,49,50,51,53,62,79,80,81,82,83,84],$Vp=[5,10,19,20,23,28,31,36,39,45,46,49,50,51,53,62,68,79,80,81,82,83,84],$Vq=[2,70],$Vr=[1,61],$Vs=[1,62],$Vt=[5,10,12,13,15,19,20,23,28,31],$Vu=[1,67],$Vv=[2,25],$Vw=[5,10,19,20,23,28,31],$Vx=[5,10,19,20,23,28,31,36],$Vy=[5,10,19,20,23,28,31,36,39,62],$Vz=[5,10,19,20,23,28,31,36,39,62,79,80,81,82,83,84],$VA=[2,39],$VB=[1,85],$VC=[1,86],$VD=[5,10,19,20,23,28,31,36,39,45,46,62,79,80,81,82,83,84],$VE=[2,44],$VF=[1,88],$VG=[1,89],$VH=[1,90],$VI=[5,10,19,20,23,28,31,36,39,45,46,49,50,51,62,79,80,81,82,83,84],$VJ=[2,47],$VK=[1,92],$VL=[1,95],$VM=[2,59],$VN=[2,64],$VO=[1,97],$VP=[11,29,54,55,56,57,60],$VQ=[1,125],$VR=[2,75],$VS=[2,10],$VT=[1,145];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"DEC_DECLAVAR":7,"DEC_FUN":8,"DEC_TYPE":9,"type_":10,"id":11,"igual":12,"llave_abre":13,"LIST_ATRIBUTOS":14,"llave_cierra":15,"dos_puntos":16,"TDATO":17,"LIST_ATRIBUTOS_P":18,"coma_":19,"const_":20,"D_VAR":21,"LIST_VAR":22,"let_":23,"D_VAR_P1":24,"T":25,"D_VAR_P2":26,"CONDICION_OR":27,"function_":28,"par_abre":29,"LIST_PAR":30,"par_cierra":31,"PARAM":32,"LIST_PAR_P":33,"CONDICION_AND":34,"CONDICION_OR_P":35,"or_":36,"CONDICION":37,"CONDICION_AND_P":38,"and_":39,"E":40,"SIG_REL":41,"not_":42,"F":43,"E_P":44,"mas":45,"menos":46,"R":47,"F_P":48,"por":49,"div":50,"mod":51,"R_P":52,"pot":53,"num":54,"bool":55,"str":56,"null_":57,"ARREGLO":58,"OBJETO_FUNCION":59,"cor_abre":60,"ELEMENTOS":61,"cor_cierra":62,"ELEMENTOS_P":63,"OBJ_FUN_CUERPO":64,"PARAMETROS_FUNCION":65,"SUB_OBJETO":66,"DIMENSION":67,"punto_":68,"OB_ATRIBUTO":69,"push_":70,"pop_":71,"length_":72,"ARGUMENTOS":73,"ARGUMENTOS_P":74,"number_":75,"string_":76,"boolean_":77,"void_":78,"menor":79,"mayor":80,"menor_igual":81,"mayor_igual":82,"igual_igual":83,"diferente":84,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"type_",11:"id",12:"igual",13:"llave_abre",15:"llave_cierra",16:"dos_puntos",19:"coma_",20:"const_",23:"let_",28:"function_",29:"par_abre",31:"par_cierra",36:"or_",39:"and_",42:"not_",45:"mas",46:"menos",49:"por",50:"div",51:"mod",53:"pot",54:"num",55:"bool",56:"str",57:"null_",60:"cor_abre",62:"cor_cierra",68:"punto_",70:"push_",71:"pop_",72:"length_",75:"number_",76:"string_",77:"boolean_",78:"void_",79:"menor",80:"mayor",81:"menor_igual",82:"mayor_igual",83:"igual_igual",84:"diferente"},
productions_: [0,[3,2],[4,2],[4,0],[6,1],[6,1],[6,1],[9,6],[14,4],[18,5],[18,0],[7,3],[7,3],[22,3],[22,0],[21,2],[24,2],[24,3],[24,0],[26,2],[26,0],[8,9],[30,2],[30,0],[33,3],[33,0],[32,3],[27,2],[35,2],[35,0],[34,2],[38,2],[38,0],[37,3],[37,1],[37,2],[40,2],[44,3],[44,3],[44,0],[43,2],[48,3],[48,3],[48,3],[48,0],[47,2],[52,3],[52,0],[25,3],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[58,3],[61,2],[61,0],[63,3],[63,0],[59,2],[64,2],[64,2],[66,2],[66,0],[69,3],[69,3],[69,3],[69,3],[67,4],[67,0],[65,3],[73,2],[73,0],[74,3],[74,0],[17,1],[17,1],[17,1],[17,1],[17,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
   
break;
case 76: case 77: case 78: case 79: case 80:
this.$=$$[$0];
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:4,8:5,9:6,10:$V1,20:$V2,23:$V3,28:$V4},{1:[3]},{5:[1,11]},{4:12,5:$V0,6:3,7:4,8:5,9:6,10:$V1,20:$V2,23:$V3,28:$V4},o($V5,[2,4]),o($V5,[2,5]),o($V5,[2,6]),{11:$V6,21:13},{11:$V6,21:15},{11:[1,16]},{11:[1,17]},{1:[2,1]},{5:[2,2]},o($V5,$V7,{22:18,19:$V8}),o($V9,[2,18],{24:20,12:[1,21],16:[1,22]}),o($V5,$V7,{22:23,19:$V8}),{29:[1,24]},{12:[1,25]},o($V5,[2,11]),{11:$V6,21:26},o($V9,[2,15]),{11:$Va,25:27,29:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:33,59:34,60:$Vg},{11:$Vh,17:37,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($V5,[2,12]),{11:$Vm,30:43,31:[2,23],32:44},{13:[1,46]},o($V5,$V7,{22:47,19:$V8}),o($V9,[2,16]),{11:$Va,25:55,27:48,29:$Vb,34:49,37:50,40:51,42:$Vn,43:53,47:54,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:33,59:34,60:$Vg},o($Vo,[2,49]),o($Vo,[2,50]),o($Vo,[2,51]),o($Vo,[2,52]),o($Vo,[2,53]),o($Vo,[2,54]),{11:$Va,25:55,29:$Vb,37:57,40:51,42:$Vn,43:53,47:54,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:33,59:34,60:$Vg,61:56,62:[2,57]},o($Vp,$Vq,{64:58,65:59,67:60,29:$Vr,60:$Vs}),o($V9,[2,20],{26:63,12:[1,64]}),o($Vt,[2,76]),o($Vt,[2,77]),o($Vt,[2,78]),o($Vt,[2,79]),o($Vt,[2,80]),{31:[1,65]},{19:$Vu,31:$Vv,33:66},{16:[1,68]},{11:[1,70],14:69},o($V5,[2,13]),{31:[1,71]},o($Vw,[2,29],{35:72,36:[1,73]}),o($Vx,[2,32],{38:74,39:[1,75]}),o($Vy,[2,34],{41:76,79:[1,77],80:[1,78],81:[1,79],82:[1,80],83:[1,81],84:[1,82]}),{11:$Va,25:55,29:$Vb,37:83,40:51,42:$Vn,43:53,47:54,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:33,59:34,60:$Vg},o($Vz,$VA,{44:84,45:$VB,46:$VC}),o($VD,$VE,{48:87,49:$VF,50:$VG,51:$VH}),o($VI,$VJ,{52:91,53:$VK}),{62:[1,93]},{19:$VL,62:$VM,63:94},o($Vo,[2,60]),o($Vo,$VN,{66:96,68:$VO}),o($Vo,$VN,{66:98,68:$VO}),{11:$Va,25:55,29:$Vb,31:[2,73],37:100,40:51,42:$Vn,43:53,47:54,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:33,59:34,60:$Vg,73:99},{11:$Va,25:55,29:$Vb,37:101,40:51,42:$Vn,43:53,47:54,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:33,59:34,60:$Vg},o($V9,[2,17]),{11:$Va,25:55,27:102,29:$Vb,34:49,37:50,40:51,42:$Vn,43:53,47:54,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:33,59:34,60:$Vg},{16:[1,103]},{31:[2,22]},{11:$Vm,32:104},{11:$Vh,17:105,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{15:[1,106]},{16:[1,107]},o($Vo,[2,48]),o($Vw,[2,27]),{11:$Va,25:55,27:108,29:$Vb,34:49,37:50,40:51,42:$Vn,43:53,47:54,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:33,59:34,60:$Vg},o($Vx,[2,30]),{11:$Va,25:55,29:$Vb,34:109,37:50,40:51,42:$Vn,43:53,47:54,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:33,59:34,60:$Vg},{11:$Va,25:55,29:$Vb,40:110,43:53,47:54,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:33,59:34,60:$Vg},o($VP,[2,81]),o($VP,[2,82]),o($VP,[2,83]),o($VP,[2,84]),o($VP,[2,85]),o($VP,[2,86]),o($Vy,[2,35]),o($Vz,[2,36]),{11:$Va,25:55,29:$Vb,43:111,47:54,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:33,59:34,60:$Vg},{11:$Va,25:55,29:$Vb,43:112,47:54,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:33,59:34,60:$Vg},o($VD,[2,40]),{11:$Va,25:55,29:$Vb,47:113,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:33,59:34,60:$Vg},{11:$Va,25:55,29:$Vb,47:114,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:33,59:34,60:$Vg},{11:$Va,25:55,29:$Vb,47:115,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:33,59:34,60:$Vg},o($VI,[2,45]),{11:$Va,25:116,29:$Vb,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:33,59:34,60:$Vg},o($Vo,[2,55]),{62:[2,56]},{11:$Va,25:55,29:$Vb,37:117,40:51,42:$Vn,43:53,47:54,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:33,59:34,60:$Vg},o($Vo,[2,61]),{11:[1,119],69:118,70:[1,120],71:[1,121],72:[1,122]},o($Vo,[2,62]),{31:[1,123]},{19:$VQ,31:$VR,74:124},{62:[1,126]},o($V9,[2,19]),{11:$Vh,17:127,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{19:$Vu,31:$Vv,33:128},o([19,31],[2,26]),o($V5,[2,7]),{11:$Vh,17:129,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vw,[2,28]),o($Vx,[2,31]),o($Vy,[2,33]),o($Vz,$VA,{44:130,45:$VB,46:$VC}),o($Vz,$VA,{44:131,45:$VB,46:$VC}),o($VD,$VE,{48:132,49:$VF,50:$VG,51:$VH}),o($VD,$VE,{48:133,49:$VF,50:$VG,51:$VH}),o($VD,$VE,{48:134,49:$VF,50:$VG,51:$VH}),o($VI,$VJ,{52:135,53:$VK}),{19:$VL,62:$VM,63:136},o($Vo,[2,63]),o($Vp,$Vq,{67:137,60:$Vs}),{29:$Vr,65:138},{29:$Vr,65:139},{29:$Vr,65:140},o($Vp,[2,71]),{31:[2,72]},{11:$Va,25:55,29:$Vb,37:141,40:51,42:$Vn,43:53,47:54,54:$Vc,55:$Vd,56:$Ve,57:$Vf,58:33,59:34,60:$Vg},o($Vp,$Vq,{67:142,60:$Vs}),{13:[1,143]},{31:[2,24]},{15:$VS,18:144,19:$VT},o($Vz,[2,37]),o($Vz,[2,38]),o($VD,[2,41]),o($VD,[2,42]),o($VD,[2,43]),o($VI,[2,46]),{62:[2,58]},o($Vo,$VN,{66:146,68:$VO}),o($Vo,$VN,{66:147,68:$VO}),o($Vo,$VN,{66:148,68:$VO}),o($Vo,$VN,{66:149,68:$VO}),{19:$VQ,31:$VR,74:150},o($Vp,[2,69]),{15:[1,151]},{15:[2,8]},{11:[1,152]},o($Vo,[2,65]),o($Vo,[2,66]),o($Vo,[2,67]),o($Vo,[2,68]),{31:[2,74]},o($V5,[2,21]),{16:[1,153]},{11:$Vh,17:154,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{15:$VS,18:155,19:$VT},{15:[2,9]}],
defaultActions: {11:[2,1],12:[2,2],66:[2,22],94:[2,56],124:[2,72],128:[2,24],136:[2,58],144:[2,8],150:[2,74],155:[2,9]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip linecoment */
break;
case 2:/*skip multi line coment*/
break;
case 3:return	'let_'
break;
case 4:return	'const_'
break;
case 5:return	'number_'
break;
case 6:return	'string_'
break;
case 7:return	'boolean_'
break;
case 8:return  'void_'
break;
case 9:return 57
break;
case 10:return 10
break;
case 11:return 70
break;
case 12:return 71
break;
case 13:return 72
break;
case 14:return 19
break;
case 15:return 68
break;
case 16:return 28
break;
case 17:return	'cor_abre'
break;
case 18:return	'cor_cierra'
break;
case 19:return	'llave_abre'
break;
case 20:return	'llave_cierra'
break;
case 21:return	'par_abre'
break;
case 22:return	'par_cierra'
break;
case 23:return	'and_'
break;
case 24:return	'or_'
break;
case 25:return	'not_'
break;
case 26:return	'menor_igual'
break;
case 27:return	'menor'
break;
case 28:return	'mayor_igual'
break;
case 29:return	'mayor'
break;
case 30:return	'igual_igual'
break;
case 31:return	'diferente'
break;
case 32:return 12
break;
case 33:return 16
break;
case 34:return 'punto_coma'
break;
case 35:return 53
break;
case 36:return 49
break;
case 37:return 50
break;
case 38:return 46
break;
case 39:return 45
break;
case 40:return 51
break;
case 41:return 55
break;
case 42:return 54
break;
case 43:return 56
break;
case 44:return 56
break;
case 45:return 56
break;
case 46:return 56
break;
case 47:return 11
break;
case 48:return 5
break;
case 49:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/([^[\n\r])*(\r|\n|\r\n)?)/,/^(?:\/\*[^'?']*\*\/)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:null\b)/,/^(?:type\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:,)/,/^(?:\.)/,/^(?:function\b)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?::)/,/^(?:;)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:true|false\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:“[^\"\n]*”)/,/^(?:"[^\"\n]*")/,/^(?:'[^''\n]*')/,/^(?:‘[^''\n]*’)/,/^(?:[a-zA-Z]([a-zA-Z0-9]|_)*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analyzer;
exports.Parser = analyzer.Parser;
exports.parse = function () { return analyzer.parse.apply(analyzer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}