/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analyzer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,11],$V2=[1,12],$V3=[1,8],$V4=[1,9],$V5=[1,10],$V6=[5,11,12,21,24,29],$V7=[1,16],$V8=[2,15],$V9=[1,22],$Va=[5,11,12,20,21,24,29],$Vb=[1,43],$Vc=[1,35],$Vd=[1,31],$Ve=[1,36],$Vf=[1,37],$Vg=[1,38],$Vh=[1,39],$Vi=[1,42],$Vj=[1,50],$Vk=[1,47],$Vl=[1,48],$Vm=[1,49],$Vn=[1,51],$Vo=[1,54],$Vp=[5,11,12,20,21,24,29,32,37,40,63],$Vq=[5,11,12,20,21,24,29,32,37,40,63,80,81,82,83,84,85],$Vr=[2,40],$Vs=[1,65],$Vt=[1,66],$Vu=[5,11,12,20,21,24,29,32,37,40,46,47,63,80,81,82,83,84,85],$Vv=[2,45],$Vw=[1,68],$Vx=[1,69],$Vy=[1,70],$Vz=[5,11,12,20,21,24,29,32,37,40,46,47,50,51,52,63,80,81,82,83,84,85],$VA=[2,48],$VB=[1,72],$VC=[5,11,12,20,21,24,29,32,37,40,46,47,50,51,52,54,63,80,81,82,83,84,85],$VD=[5,11,12,20,21,24,29,32,37,40,46,47,50,51,52,54,63,69,80,81,82,83,84,85],$VE=[2,71],$VF=[1,81],$VG=[1,82],$VH=[5,11,12,13,14,16,20,21,24,29,32],$VI=[1,88],$VJ=[2,26],$VK=[12,30,55,56,57,58,61],$VL=[5,11,12,20,21,24,29,32],$VM=[5,11,12,20,21,24,29,32,37],$VN=[1,106],$VO=[2,60],$VP=[2,65],$VQ=[1,108],$VR=[1,135],$VS=[2,76],$VT=[2,11],$VU=[1,149];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"DEC_DECLAVAR":7,"DEC_FUN":8,"DEC_TYPE":9,"ASIGNACION":10,"type_":11,"id":12,"igual":13,"llave_abre":14,"LIST_ATRIBUTOS":15,"llave_cierra":16,"dos_puntos":17,"TDATO":18,"LIST_ATRIBUTOS_P":19,"coma_":20,"const_":21,"D_VAR":22,"LIST_VAR":23,"let_":24,"D_VAR_P1":25,"T":26,"D_VAR_P2":27,"CONDICION_OR":28,"function_":29,"par_abre":30,"LIST_PAR":31,"par_cierra":32,"PARAM":33,"LIST_PAR_P":34,"CONDICION_AND":35,"CONDICION_OR_P":36,"or_":37,"CONDICION":38,"CONDICION_AND_P":39,"and_":40,"E":41,"SIG_REL":42,"not_":43,"F":44,"E_P":45,"mas":46,"menos":47,"R":48,"F_P":49,"por":50,"div":51,"mod":52,"R_P":53,"pot":54,"num":55,"bool":56,"str":57,"null_":58,"ARREGLO":59,"OBJETO_FUNCION":60,"cor_abre":61,"ELEMENTOS":62,"cor_cierra":63,"ELEMENTOS_P":64,"OBJ_FUN_CUERPO":65,"PARAMETROS_FUNCION":66,"SUB_OBJETO":67,"DIMENSION":68,"punto_":69,"OB_ATRIBUTO":70,"push_":71,"pop_":72,"length_":73,"ARGUMENTOS":74,"ARGUMENTOS_P":75,"number_":76,"string_":77,"boolean_":78,"void_":79,"menor":80,"mayor":81,"menor_igual":82,"mayor_igual":83,"igual_igual":84,"diferente":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"type_",12:"id",13:"igual",14:"llave_abre",16:"llave_cierra",17:"dos_puntos",20:"coma_",21:"const_",24:"let_",29:"function_",30:"par_abre",32:"par_cierra",37:"or_",40:"and_",43:"not_",46:"mas",47:"menos",50:"por",51:"div",52:"mod",54:"pot",55:"num",56:"bool",57:"str",58:"null_",61:"cor_abre",63:"cor_cierra",69:"punto_",71:"push_",72:"pop_",73:"length_",76:"number_",77:"string_",78:"boolean_",79:"void_",80:"menor",81:"mayor",82:"menor_igual",83:"mayor_igual",84:"igual_igual",85:"diferente"},
productions_: [0,[3,2],[4,2],[4,0],[6,1],[6,1],[6,1],[6,1],[9,6],[15,4],[19,5],[19,0],[7,3],[7,3],[23,3],[23,0],[22,2],[25,2],[25,3],[25,0],[27,2],[27,0],[8,9],[31,2],[31,0],[34,3],[34,0],[33,3],[28,2],[36,2],[36,0],[35,2],[39,2],[39,0],[38,3],[38,1],[38,2],[41,2],[45,3],[45,3],[45,0],[44,2],[49,3],[49,3],[49,3],[49,0],[48,2],[53,3],[53,0],[26,3],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[59,3],[62,2],[62,0],[64,3],[64,0],[60,2],[65,2],[65,2],[67,2],[67,0],[70,3],[70,3],[70,3],[70,3],[68,4],[68,0],[66,3],[74,2],[74,0],[75,3],[75,0],[10,3],[18,1],[18,1],[18,1],[18,1],[18,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
   
break;
case 78: case 79: case 80: case 81: case 82:
this.$=$$[$0];
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:4,8:5,9:6,10:7,11:$V1,12:$V2,21:$V3,24:$V4,29:$V5},{1:[3]},{5:[1,13]},{4:14,5:$V0,6:3,7:4,8:5,9:6,10:7,11:$V1,12:$V2,21:$V3,24:$V4,29:$V5},o($V6,[2,4]),o($V6,[2,5]),o($V6,[2,6]),o($V6,[2,7]),{12:$V7,22:15},{12:$V7,22:17},{12:[1,18]},{12:[1,19]},{13:[1,20]},{1:[2,1]},{5:[2,2]},o($V6,$V8,{23:21,20:$V9}),o($Va,[2,19],{25:23,13:[1,24],17:[1,25]}),o($V6,$V8,{23:26,20:$V9}),{30:[1,27]},{13:[1,28]},{12:$Vb,26:34,30:$Vc,38:29,41:30,43:$Vd,44:32,48:33,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:40,60:41,61:$Vi},o($V6,[2,12]),{12:$V7,22:44},o($Va,[2,16]),{12:$Vb,26:45,30:$Vc,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:40,60:41,61:$Vi},{12:$Vj,18:46,76:$Vk,77:$Vl,78:$Vm,79:$Vn},o($V6,[2,13]),{12:$Vo,31:52,32:[2,24],33:53},{14:[1,55]},o($V6,[2,77]),o($Vp,[2,35],{42:56,80:[1,57],81:[1,58],82:[1,59],83:[1,60],84:[1,61],85:[1,62]}),{12:$Vb,26:34,30:$Vc,38:63,41:30,43:$Vd,44:32,48:33,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:40,60:41,61:$Vi},o($Vq,$Vr,{45:64,46:$Vs,47:$Vt}),o($Vu,$Vv,{49:67,50:$Vw,51:$Vx,52:$Vy}),o($Vz,$VA,{53:71,54:$VB}),{12:$Vb,26:34,28:73,30:$Vc,35:74,38:75,41:30,43:$Vd,44:32,48:33,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:40,60:41,61:$Vi},o($VC,[2,50]),o($VC,[2,51]),o($VC,[2,52]),o($VC,[2,53]),o($VC,[2,54]),o($VC,[2,55]),{12:$Vb,26:34,30:$Vc,38:77,41:30,43:$Vd,44:32,48:33,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:40,60:41,61:$Vi,62:76,63:[2,58]},o($VD,$VE,{65:78,66:79,68:80,30:$VF,61:$VG}),o($V6,$V8,{23:83,20:$V9}),o($Va,[2,17]),o($Va,[2,21],{27:84,13:[1,85]}),o($VH,[2,78]),o($VH,[2,79]),o($VH,[2,80]),o($VH,[2,81]),o($VH,[2,82]),{32:[1,86]},{20:$VI,32:$VJ,34:87},{17:[1,89]},{12:[1,91],15:90},{12:$Vb,26:34,30:$Vc,41:92,44:32,48:33,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:40,60:41,61:$Vi},o($VK,[2,83]),o($VK,[2,84]),o($VK,[2,85]),o($VK,[2,86]),o($VK,[2,87]),o($VK,[2,88]),o($Vp,[2,36]),o($Vq,[2,37]),{12:$Vb,26:34,30:$Vc,44:93,48:33,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:40,60:41,61:$Vi},{12:$Vb,26:34,30:$Vc,44:94,48:33,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:40,60:41,61:$Vi},o($Vu,[2,41]),{12:$Vb,26:34,30:$Vc,48:95,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:40,60:41,61:$Vi},{12:$Vb,26:34,30:$Vc,48:96,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:40,60:41,61:$Vi},{12:$Vb,26:34,30:$Vc,48:97,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:40,60:41,61:$Vi},o($Vz,[2,46]),{12:$Vb,26:98,30:$Vc,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:40,60:41,61:$Vi},{32:[1,99]},o($VL,[2,30],{36:100,37:[1,101]}),o($VM,[2,33],{39:102,40:[1,103]}),{63:[1,104]},{20:$VN,63:$VO,64:105},o($VC,[2,61]),o($VC,$VP,{67:107,69:$VQ}),o($VC,$VP,{67:109,69:$VQ}),{12:$Vb,26:34,30:$Vc,32:[2,74],38:111,41:30,43:$Vd,44:32,48:33,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:40,60:41,61:$Vi,74:110},{12:$Vb,26:34,30:$Vc,38:112,41:30,43:$Vd,44:32,48:33,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:40,60:41,61:$Vi},o($V6,[2,14]),o($Va,[2,18]),{12:$Vb,26:34,28:113,30:$Vc,35:74,38:75,41:30,43:$Vd,44:32,48:33,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:40,60:41,61:$Vi},{17:[1,114]},{32:[2,23]},{12:$Vo,33:115},{12:$Vj,18:116,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{16:[1,117]},{17:[1,118]},o($Vp,[2,34]),o($Vq,$Vr,{45:119,46:$Vs,47:$Vt}),o($Vq,$Vr,{45:120,46:$Vs,47:$Vt}),o($Vu,$Vv,{49:121,50:$Vw,51:$Vx,52:$Vy}),o($Vu,$Vv,{49:122,50:$Vw,51:$Vx,52:$Vy}),o($Vu,$Vv,{49:123,50:$Vw,51:$Vx,52:$Vy}),o($Vz,$VA,{53:124,54:$VB}),o($VC,[2,49]),o($VL,[2,28]),{12:$Vb,26:34,28:125,30:$Vc,35:74,38:75,41:30,43:$Vd,44:32,48:33,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:40,60:41,61:$Vi},o($VM,[2,31]),{12:$Vb,26:34,30:$Vc,35:126,38:75,41:30,43:$Vd,44:32,48:33,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:40,60:41,61:$Vi},o($VC,[2,56]),{63:[2,57]},{12:$Vb,26:34,30:$Vc,38:127,41:30,43:$Vd,44:32,48:33,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:40,60:41,61:$Vi},o($VC,[2,62]),{12:[1,129],70:128,71:[1,130],72:[1,131],73:[1,132]},o($VC,[2,63]),{32:[1,133]},{20:$VR,32:$VS,75:134},{63:[1,136]},o($Va,[2,20]),{12:$Vj,18:137,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{20:$VI,32:$VJ,34:138},o([20,32],[2,27]),o($V6,[2,8]),{12:$Vj,18:139,76:$Vk,77:$Vl,78:$Vm,79:$Vn},o($Vq,[2,38]),o($Vq,[2,39]),o($Vu,[2,42]),o($Vu,[2,43]),o($Vu,[2,44]),o($Vz,[2,47]),o($VL,[2,29]),o($VM,[2,32]),{20:$VN,63:$VO,64:140},o($VC,[2,64]),o($VD,$VE,{68:141,61:$VG}),{30:$VF,66:142},{30:$VF,66:143},{30:$VF,66:144},o($VD,[2,72]),{32:[2,73]},{12:$Vb,26:34,30:$Vc,38:145,41:30,43:$Vd,44:32,48:33,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:40,60:41,61:$Vi},o($VD,$VE,{68:146,61:$VG}),{14:[1,147]},{32:[2,25]},{16:$VT,19:148,20:$VU},{63:[2,59]},o($VC,$VP,{67:150,69:$VQ}),o($VC,$VP,{67:151,69:$VQ}),o($VC,$VP,{67:152,69:$VQ}),o($VC,$VP,{67:153,69:$VQ}),{20:$VR,32:$VS,75:154},o($VD,[2,70]),{16:[1,155]},{16:[2,9]},{12:[1,156]},o($VC,[2,66]),o($VC,[2,67]),o($VC,[2,68]),o($VC,[2,69]),{32:[2,75]},o($V6,[2,22]),{17:[1,157]},{12:$Vj,18:158,76:$Vk,77:$Vl,78:$Vm,79:$Vn},{16:$VT,19:159,20:$VU},{16:[2,10]}],
defaultActions: {13:[2,1],14:[2,2],87:[2,23],105:[2,57],134:[2,73],138:[2,25],140:[2,59],148:[2,9],154:[2,75],159:[2,10]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip linecoment */
break;
case 2:/*skip multi line coment*/
break;
case 3:return	'let_'
break;
case 4:return	'const_'
break;
case 5:return	'number_'
break;
case 6:return	'string_'
break;
case 7:return	'boolean_'
break;
case 8:return  'void_'
break;
case 9:return 58
break;
case 10:return 11
break;
case 11:return 71
break;
case 12:return 72
break;
case 13:return 73
break;
case 14:return 20
break;
case 15:return 69
break;
case 16:return 29
break;
case 17:return	'cor_abre'
break;
case 18:return	'cor_cierra'
break;
case 19:return	'llave_abre'
break;
case 20:return	'llave_cierra'
break;
case 21:return	'par_abre'
break;
case 22:return	'par_cierra'
break;
case 23:return	'and_'
break;
case 24:return	'or_'
break;
case 25:return	'not_'
break;
case 26:return	'menor_igual'
break;
case 27:return	'menor'
break;
case 28:return	'mayor_igual'
break;
case 29:return	'mayor'
break;
case 30:return	'igual_igual'
break;
case 31:return	'diferente'
break;
case 32:return 13
break;
case 33:return 17
break;
case 34:return 'punto_coma'
break;
case 35:return 54
break;
case 36:return 50
break;
case 37:return 51
break;
case 38:return 47
break;
case 39:return 46
break;
case 40:return 52
break;
case 41:return 56
break;
case 42:return 55
break;
case 43:return 57
break;
case 44:return 57
break;
case 45:return 57
break;
case 46:return 57
break;
case 47:return 12
break;
case 48:return 5
break;
case 49:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/([^[\n\r])*(\r|\n|\r\n)?)/,/^(?:\/\*[^'?']*\*\/)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:null\b)/,/^(?:type\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:,)/,/^(?:\.)/,/^(?:function\b)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?::)/,/^(?:;)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:true|false\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:“[^\"\n]*”)/,/^(?:"[^\"\n]*")/,/^(?:'[^''\n]*')/,/^(?:‘[^''\n]*’)/,/^(?:[a-zA-Z]([a-zA-Z0-9]|_)*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analyzer;
exports.Parser = analyzer.Parser;
exports.parse = function () { return analyzer.parse.apply(analyzer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}